[
  {
    "objectID": "24-module.html",
    "href": "24-module.html",
    "title": "24  Mixed Effects or Multilevel Modeling",
    "section": "",
    "text": "24.1 Objectives",
    "crumbs": [
      "Part II - Statistics and Inference",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Mixed Effects or Multilevel Modeling</span>"
    ]
  },
  {
    "objectID": "24-module.html#objectives",
    "href": "24-module.html#objectives",
    "title": "24  Mixed Effects or Multilevel Modeling",
    "section": "",
    "text": "In this module, we extend our discussion of regression modeling even further to include “mixed effects” or “multilevel” models.",
    "crumbs": [
      "Part II - Statistics and Inference",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Mixed Effects or Multilevel Modeling</span>"
    ]
  },
  {
    "objectID": "24-module.html#preliminaries",
    "href": "24-module.html#preliminaries",
    "title": "24  Mixed Effects or Multilevel Modeling",
    "section": "24.2 Preliminaries",
    "text": "24.2 Preliminaries\n\nInstall and load these packages in R: {lme4}, {redres}, and {glmmTMB}\nLoad {tidyverse}, {sjPlot}, and {effects}\nBe sure you have the packages {car}, {cowplot}, {lmtest}, and {MASS} installed",
    "crumbs": [
      "Part II - Statistics and Inference",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Mixed Effects or Multilevel Modeling</span>"
    ]
  },
  {
    "objectID": "24-module.html#overview-of-mixed-models",
    "href": "24-module.html#overview-of-mixed-models",
    "title": "24  Mixed Effects or Multilevel Modeling",
    "section": "24.3 Overview of “Mixed” Models",
    "text": "24.3 Overview of “Mixed” Models\nA final extension of linear regression modeling that we will talk about is so-called “multilevel” or “mixed effects” modeling. This is a very complex topic, and we will only scratch the surface!\nIn a (general or generalized) linear mixed model, we have a reponse variable, \\(Y\\), and observations that fall into different factor categories each with some set of levels (e.g., “sex” with levels “male” and “female”), and we are interested in the effects of the various factors and factor levels on the response variable. Generically, if \\(\\mu\\) = a population mean response and \\(\\mu_A\\) = mean response for observations belonging to factor level A, then the effect of A is given by \\(\\mu\\) - \\(\\mu_A\\). We have already dealt with factors and factor levels in our linear regression models when we looked at categorical predictors (e.g., sex, rank category) in our discussions of ANOVA and ANCOVA.\nWe can conceptualize these factor effects as being either fixed or random. Fixed factors are those that reflect all levels of interest in our study, while random effects are those that represent only a sample of the levels of interest. For example, if we include sex as a factor in a model with the factor levels “male” and “female”, this (typically) will cover the entire gamut of levels of interest our study, thus we would consider sex a fixed factor. When we were doing ANOVA and ANCOVA analyses previously, we were implicitly looking at the effects of such fixed factors.\nHowever, if our observational data were to consist of repeated observations of the same sampling unit, e.g., measurements taken on the same set of individuals on different dates, individual ID would be considered a random factor because it is unlikely that we will have collected data from all possible “levels of interest”, i.e., from all possible individual subjects. We have not yet dealt with such random factors as an additional source of variance in our modeling.\nSo-called mixed models, then, are those that include BOTH fixed and random effects. Including random effects in addition to fixed effects in our models has several ramifications:\n\nUsing random effects broadens the scope of inference. That is, we can use statistical methods to infer something about the population from which the levels of the random factor have been drawn.\nUsing random effects naturally incorporates dependence in the model and helps us account for pseudoreplication in our dataset. Observations that share the same level of the random effects are explicitly modeled as being correlated. This makes mixed effect modeling very useful for dealing with time series data, spatially correlated data, or situations where we have repeated observations/measures from the same subjects or sampling unit.\nUsing random factors often gives more accurate parameter estimates.\nIncorporating random factors, however, does require the use of more sophisticated estimation and fitting methods.\n\nNot surprisingly, there several different varieties of mixed modeling approaches, which are supported in a variety of different packages in R:\n\nStandard or general Linear Mixed Models (LMM), analogous to standard or general linear regression - used when we are dealing with normally distributed variables and error structures.\nGeneralized Linear Mixed Models (GLMM), analogous to generalized linear regresseion - used when we are dealing with various other variable types and error structure (e.g., binary, proportion, or count data).\nNonlinear Mixed Models (NLMM), analogous to nonlinear regression - used if we are dealing with situations where our response variable is best modeled by a nonlinear combination of predictor variables.\n\n\nNOTE: We have not talked at all in this course about general or generalized NONLINEAR modeling, but it is worth knowing that such approaches are also possible. NONLINEAR modeling is where our regression equation is a nonlinear function of the model parameters.\n\nWe will explore “mixed effects” modeling using an example based on this excellent tutorial.\n\nEXAMPLE:\nSuppose we have measured the amount of grooming received by female chimpanzees when they are either in their periovulatory period (i.e., the window of 2-3 days around the likely time of ovulation) or duing other portions of their reproductive cycle. We collected data on the duration of grooming bouts received and scored a female’s reproductive condition at the time as a categorical factor with two levels: “POP” versus “NONPOP”. On top of that, we also recorded data on female parity at the time of the grooming bout, i.e., whether the female had given birth previously (was “parous”, or “P”) or had not yet had an offspring (was “nulliparous”, or “N”).\nIf we are interested in how reproductive condition and parity influence how much grooming a female receives, our simple regression model would look like this:\n\\[grooming\\ duration \\sim reproductive\\ condition + parity + \\epsilon\\]\nAlso imagine that our study design was such that we took multiple observations per subject. That is, our data set includes records of multiple grooming bouts received by each subject. This situation violates the assumption of independence of observations that we make for standard linear regression: multiple responses/measures from the same subject cannot be regarded as independent from each other.\nUsing a mixed effects model, we can deal with this situation by adding subject ID as a random effect in our model. Doing so allows us to address the nonindependence issue by estimating a different set of parameters for each level of the factor “subject”. We can either estimate a different intercept for each subject (which would correspond to each female having a different “baseline” level of grooming received) or estimate a different intercept and slope (where individual subjects are presumed to differ both in the baseline level of grooming received and the strength of the relationship between grooming duration, on the one hand, and reproductive condition and parity, on the other). Our mixed effects model estimates these individual level parameters in addition to the main effects of each variable.\nThis is why a “mixed effects” model is called a mixed model. The models that we have considered so far have been fixed effects only models and included only one or more “fixed” predictor variables and a general error term. We essentially divided the world into things that we somehow understand or that are systematic (the fixed effects, or the explanatory variables) and things that we could not control for or do not understand (the general error, or \\(\\epsilon\\)). These fixed effects models did not examine possible structure within the error term.\nIn a mixed model, by contrast, we add one or more random effects to our fixed effects that may explain a portion of the variance in our error term.\n\n\nCHALLENGE\nLet’s explore these idea using some actual data. First, load in the dataset “chimpgrooming.csv” and do some exploratory data analysis:\n\nf &lt;- \"https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/chimpgrooming.csv\"\nd &lt;- read_csv(f, col_names = TRUE)\nhead(d)\n\n## # A tibble: 6 × 5\n##   subject parity season reprocondition duration\n##   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;             &lt;dbl&gt;\n## 1 Nina    P      WS     NONPOP             214.\n## 2 Nina    P      WS     POP                206.\n## 3 Nina    P      WS     NONPOP             294.\n## 4 Nina    P      WS     POP                269.\n## 5 Nina    P      WS     NONPOP             205.\n## 6 Nina    P      WS     POP                287.\n\nsummary(d)\n\n##    subject             parity             season          reprocondition    \n##  Length:84          Length:84          Length:84          Length:84         \n##  Class :character   Class :character   Class :character   Class :character  \n##  Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n##                                                                             \n##                                                                             \n##                                                                             \n##     duration     \n##  Min.   : 86.34  \n##  1st Qu.:132.36  \n##  Median :205.41  \n##  Mean   :197.81  \n##  3rd Qu.:252.27  \n##  Max.   :316.23\n\n\n\nPlot grooming received duration in relation to subject ID…\n\n\n\nShow Code\n(p &lt;- ggplot(data = d, aes(x = subject, y = duration)) + geom_boxplot() + geom_jitter(width = 0.2,\n    alpha = 0.5) + xlab(\"subject\") + theme(axis.text.x = element_text(angle = 90)))\n\n\n\n\n\n\n\n\n\n\nPlot grooming received in relation to reproductive condition…\n\n\n\nShow Code\n(p &lt;- ggplot(data = d, aes(x = reprocondition, y = duration)) + geom_boxplot() +\n    xlab(\"reproductive condition\") + geom_jitter(width = 0.2, alpha = 0.5) + theme(axis.text.x = element_text(angle = 90)))\n\n\n\n\n\n\n\n\n\n\nPlot grooming received in relation to reproductive condition and parity…\n\n\n\nShow Code\n(p &lt;- ggplot(data = d, aes(x = reprocondition, y = duration, fill = factor(parity))) +\n    geom_boxplot() + xlab(\"reproductive condition\") + labs(fill = \"parity\") + theme(axis.text.x = element_text(angle = 90)))\n\n\n\n\n\n\n\n\n\nShow Code\n# or\n\n(p &lt;- ggplot(data = d, aes(x = parity, y = duration, fill = factor(reprocondition))) +\n    geom_boxplot() + xlab(\"parity\") + labs(fill = \"reprocondition\") + theme(axis.text.x = element_text(angle = 90)))\n\n\n\n\n\n\n\n\n\nFrom these plots, we can see lots of [a] individual variation in how much grooming is received (some females seem to receive more than others, overall), [b] variation in response to reproductive condition (where grooming in the POP seems to be higher, overall), [c] limited variation due to parity, and [d] variation in response to this combination of fixed effects.\n\nFinally, plot grooming received into relation to both a fixed effect (reprocondition) and a random effect (subject)…\n\n\n\nShow Code\n(p &lt;- ggplot(data = d, aes(x = reprocondition, y = duration, fill = factor(subject))) +\n    geom_boxplot() + xlab(\"reproductive condition\") + labs(fill = \"subject\") + theme(axis.text.x = element_text(angle = 90)))\n\n\n\n\n\n\n\n\n\nShow Code\n# or\n\n(p &lt;- ggplot(data = d, aes(x = subject, y = duration, fill = factor(reprocondition))) +\n    geom_boxplot() + xlab(\"subject\") + labs(fill = \"reproductive condition\") + theme(axis.text.x = element_text(angle = 90)))\n\n\n\n\n\n\n\n\n\nWhat patterns do you see? There is, again, lots of apparent variation, and some of it seems to be associated with female ID and/or reproductive condition.",
    "crumbs": [
      "Part II - Statistics and Inference",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Mixed Effects or Multilevel Modeling</span>"
    ]
  },
  {
    "objectID": "24-module.html#random-intercept-models",
    "href": "24-module.html#random-intercept-models",
    "title": "24  Mixed Effects or Multilevel Modeling",
    "section": "24.4 Random Intercept Models",
    "text": "24.4 Random Intercept Models\nWe will now perform an initial mixed effects analysis where we look in more detail at how reproductive condition and parity (as fixed effects) affect grooming duration, where we include individual subject ID as a random effect.\nHere is a first mixed effects model that we will fit, using one extension of formula notation that is commonly used in R.\n\\[grooming\\ duration \\sim reproductive\\ condition + parity + (1|subject) + \\epsilon\\]\nHere, the 1 refers to the fact that we want to estimate an intercept and the pipe operator(“|”) following the “1” signifies that we want to estimate a different intercept for each subject. Note that this generic formula still contains a general error term, \\(\\epsilon\\), to highlight that there will still be unexplained “error” variance after accounting for both fixed and random effects in the model.\nWe can think of this formula as saying that we expect our dataset to include multiple observations of the response variable per subject, and these responses will depend, in part, on each subject’s baseline level. This effectively accounts the nonindependence that stems from having multiple responses by the same subject.\nThe {lme4} package in R is commonly used for mixed effects modeling, and the function lmer() is the mixed model equivalent of the function lm(). In the formula syntax for mixed effects models using the {lme4} package, fixed effects are included without parentheses while random effects are included in parentheses (the error, \\(\\epsilon\\), is understood and is not included explicitly).\n\nNOTE: We could also use the package {nlme} for mixed effects modeling (which requires a slightly different formula syntax than that used here). That same package also allows us to do nonlinear mixed effects modeling, which we will not be talking about. It is important to note that {lme4} uses, by default, a slightly different parameter estimation algorithm than {nlme}. Unless otherwise specified, {lme4} uses “restricted maximum likelihood” (REML) rather than ordinary maximum likelihood estimation, which is what is used in {nlme}. In practice, these give very similar results. We will see below that when we want to compare different models using {lme4}, we will need to tell {lme4} to use ordinary maximum likelihood.\n\nThe code block below implements this first “mixed effects” model:\n\nm &lt;- lmer(data = d, duration ~ reprocondition + parity + (1 | subject))\nsummary(m)\n\n## Linear mixed model fit by REML ['lmerMod']\n## Formula: duration ~ reprocondition + parity + (1 | subject)\n##    Data: d\n## \n## REML criterion at convergence: 796.1\n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -2.2611 -0.5349 -0.1890  0.3918  3.1994 \n## \n## Random effects:\n##  Groups   Name        Variance Std.Dev.\n##  subject  (Intercept) 611.9    24.74   \n##  Residual             847.3    29.11   \n## Number of obs: 84, groups:  subject, 6\n## \n## Fixed effects:\n##                   Estimate Std. Error t value\n## (Intercept)        132.841     15.305   8.680\n## reproconditionPOP   20.293      6.352   3.195\n## parityP            109.650     21.173   5.179\n## \n## Correlation of Fixed Effects:\n##             (Intr) rprPOP\n## rprcndtnPOP -0.208       \n## parityP     -0.692  0.000\n\n\nLet’s focus on the output for the random effects first. Have a look at the column standard deviation. The entry for subject shows us how much variability in grooming duration (apart from that explained by the fixed effects) is due to subject ID. The entry for Residual summarizes the remaining variability in grooming duration that is not due to subject or to our fixed effects. The latter is our \\(\\epsilon\\), the “random” deviations from the predicted values that are not due to either subject or our fixed effects.\nThe fixed effects output mirrors the coefficient tables that we have seen previously in our linear models that have focused only on fixed effects. The coefficient “reproconditionPOP” is the \\(\\beta\\) coefficient for the categorical effect of reproductive condition. The positive sign for the coefficient means that grooming duration is GREATER by 20.293 units for POP than for NONPOP females. Then, there is a standard error associated with this slope, and a t value, which is simply the estimate divided by the standard error.\nThe coefficient “parityP” is the \\(\\beta\\) coefficient for the categorical effect of parity. The grooming duration associated with being parous versus nulliparous is GREATER by 109.65 units.\nThe INTERCEPT in this case is the grooming duration associated with being an average, nulliparous, NONPOP female. Like the lm() function, the lmer() took whatever factor level came first in the alphabet to be the reference level for each fixed effect variable.\nLet’s also look at the coefficients coming out of the model and their confidence intervals.\n\ncoefficients(m)\n\n## $subject\n##       (Intercept) reproconditionPOP parityP\n## Luna    142.76558          20.29286  109.65\n## Maya    137.37902          20.29286  109.65\n## Nina    118.37755          20.29286  109.65\n## Nipa    160.80050          20.29286  109.65\n## Sofia    99.80117          20.29286  109.65\n## Vita    137.92047          20.29286  109.65\n## \n## attr(,\"class\")\n## [1] \"coef.mer\"\n\n# or, for just the fixed effects...  coefficients(summary(m))\nconfint(m, level = 0.95, method = \"boot\")\n\n## Computing bootstrap confidence intervals ...\n\n\n## \n## 9 message(s): boundary (singular) fit: see help('isSingular')\n\n\n##                        2.5 %    97.5 %\n## .sig01              3.129988  39.63755\n## .sigma             24.422015  33.61213\n## (Intercept)       106.216226 165.28813\n## reproconditionPOP   7.862200  31.58144\n## parityP            65.896035 150.34500\n\n\n\nNOTE: For the confint() function, we can set method = argument to “boot” (to generate a CI based on bootstrapping), “profile” (to generate a CI based on likelihoods), or “Wald” (which generates a CI for the fixed effects only). Also, in the output from running confint(), “.sigXX” is the square root of the variance associated with each of the random parameter levels and “.sigma” is the square root of the variance associated with the residuals of the model\n\nWe can see the separate intercepts, or “baseline” level of grooming received, associated with each female when they are (presumably) nulliparous and in a NONPOP reproductive condition.\n\nNOTE: Not all females are, necessarily, ever seen in a particular parity or reproductive condition!\n\n\n24.4.1 Visualizing Model Results\nAs in earlier modules, we can use the predictorEffect() function from the {effects} to visualize our mixed model results in terms of how the response variable is expected to differ across levels of each predictor variable when the other predictor and the random effect of subject are controlled for.\n\nplot(predictorEffects(m, partial.residuals = TRUE))\n\n\n\n\n\n\n\n\nSimilar effects plots for our predictors can be created using plot_model() from the {sjPlot} package.\n\np1 &lt;- plot_model(m, type = \"eff\", terms = c(\"reprocondition\"))\np2 &lt;- plot_model(m, type = \"eff\", terms = c(\"parity\"))\ncowplot::plot_grid(p1, p2, ncol = 2)\n\n\n\n\n\n\n\n\nWe can also plot_model() to visualize estimates and confidence intervals for the fixed effect coefficients and for the random effects.\n\np1 &lt;- plot_model(m, type = \"est\")\np2 &lt;- plot_model(m, type = \"re\")\ncowplot::plot_grid(p1, p2, ncol = 2)\n\n\n\n\n\n\n\n\nThe package {mixedup}, installable from here, is a useful package that provides several functions for extracting relevant summary information from mixed models.\n\nmixedup::summarize_model(m)  # clean model summary\n\n##     Group    Effect Variance    SD SD_2.5 SD_97.5 Var_prop\n##   subject Intercept   611.94 24.74  10.57   41.75     0.42\n##  Residual             847.28 29.11  24.91   34.13     0.58\n##               Term  Value    SE    t P_value Lower_2.5 Upper_97.5\n##          Intercept 132.84 15.30 8.68    0.00    102.84     162.84\n##  reproconditionPOP  20.29  6.35 3.19    0.00      7.84      32.74\n##            parityP 109.65 21.17 5.18    0.00     68.15     151.15\n\nmixedup::extract_fixed_effects(m)  # table of fixed effects coefficients\n\n## # A tibble: 3 × 7\n##   term              value    se     t p_value lower_2.5 upper_97.5\n##   &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n## 1 Intercept         133.  15.3   8.68   0        103.        163. \n## 2 reproconditionPOP  20.3  6.35  3.20   0.001      7.84       32.7\n## 3 parityP           110.  21.2   5.18   0         68.2       151.\n\nmixedup::extract_random_coefficients(m)  # table of coefficients for random effects\n\n## # A tibble: 6 × 7\n##   group_var effect    group value    se lower_2.5 upper_97.5\n##   &lt;chr&gt;     &lt;chr&gt;     &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n## 1 subject   Intercept Luna  143.   17.0     109.        176.\n## 2 subject   Intercept Maya  137.   17.0     104.        171.\n## 3 subject   Intercept Nina  118.   17.0      85.0       152.\n## 4 subject   Intercept Nipa  161.   17.0     127.        194.\n## 5 subject   Intercept Sofia  99.8  17.0      66.5       133.\n## 6 subject   Intercept Vita  138.   17.0     105.        171.\n\nmixedup::extract_random_effects(m)  # table of coefficients for each level of random effect\n\n## # A tibble: 6 × 7\n##   group_var effect    group  value    se lower_2.5 upper_97.5\n##   &lt;chr&gt;     &lt;chr&gt;     &lt;fct&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n## 1 subject   Intercept Luna    9.93  7.42     -4.62     24.5  \n## 2 subject   Intercept Maya    4.54  7.42    -10.0      19.1  \n## 3 subject   Intercept Nina  -14.5   7.42    -29.0       0.082\n## 4 subject   Intercept Nipa   28.0   7.42     13.4      42.5  \n## 5 subject   Intercept Sofia -33.0   7.42    -47.6     -18.5  \n## 6 subject   Intercept Vita    5.08  7.42     -9.46     19.6\n\n\n\n\n24.4.2 Residual Analysis\nWe can use functions from the {redres} package to conduct some analyses on the residuals resulting from a mixed effects model. The plot_resqq() function creates a QQ plot of the overall residuals from the model. Ideally, these should fall along a line, and we can see that ours do not…\n\nplot_resqq(m)\n\n## Loading required namespace: testthat\n\n\n\n\n\n\n\n\n# or\nqqnorm(compute_redres(m))\nqqline(compute_redres(m))\n\n\n\n\n\n\n\n# or\ncar::qqPlot(compute_redres(m), id = FALSE)\n\n\n\n\n\n\n\n\n… rather, the residuals from this model appear to deviate from a normal distribution, thus the appropriatess of using linear regression here is suspect!\nThe plot_redres() function plots the residuals with respect to fitted values of the response variable.\nWe can also pass an “xvar =” argument to plot_redres() to view our residuals by our different predictor variables, e.g., reprocondition, parity, or subject.\nThe code below generates and prints all of these plots…\n\np1 &lt;- plot_redres(m)\np2 &lt;- plot_redres(m, xvar = \"reprocondition\")\np3 &lt;- plot_redres(m, xvar = \"parity\")\np4 &lt;- plot_redres(m, xvar = \"subject\")\ncowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n\n\n\n\n\n\n\n\nIn the plot of residuals by fitted values (upper left), the residuals should roughly form a horizonal belt around the zero line, with the points randomly scattered above and below 0. Such a pattern would be consistent with “homoskedasticity”, or equal variance, in the error term across values of the predictor terms and the response. Here, things look pretty good (although perhaps the width of the “belt” of points looks like it may be wider at larger values of the fitted response).\nIn the other plots, we are looking to see whether the scatter (variance) above and below the zero line is similar across levels of the predictor variables.\nFinally, we can use the plot_ranef() function to plot estimate modal values for the random effects (i.e., in our model, for each subject conditioned on the fixed effects) against quantiles of the normal distribution. For linear regression to be appropriate, the random effects should not deviate from normal expectations.\n\nplot_ranef(m)\n\n\n\n\n\n\n\n\nAlternatively, we can use the {sjPlot} function plot_model() with the “type =” argument set to “diag” to produce a similar set of diagnostic plots.\n\np &lt;- plot_model(m, type = \"diag\")\ncowplot::plot_grid(p[[1]], p[[3]], p[[4]], ncol = 1)\n\n\n\n\n\n\n\n\n\n\nInference using LRTs\nIn mixed effects models, it is not as straightforward as it is for standard linear models to determine p values associated with either overall models or individual coefficients. However, using likelihood ratio tests, which we previously used for comparing among generalized linear models, is one common approach. Likelihood is the probability of seeing the data we have actually collected given a particular model. The logic of the likelihood ratio test is to compare the likelihood of two models with each other, i.e., a model that includes the factor that we are interested in versus a reduced, nested model with that factor excluded.\nSo… if we are interested in the effect of reproductive condition on grooming duration, we could compare a more complex model…\n\\[grooming\\ duration \\sim reproductive\\ condition + parity + (1|subject) + \\epsilon\\]\nto a nested, less complex model…\n\\[grooming\\ duration \\sim parity + (1|subject) + \\epsilon\\]\nIn R, we would do this as follows:\n\nfull &lt;- lmer(data = d, duration ~ reprocondition + parity + (1 | subject), REML = FALSE)\n# note the additional `REML=` argument\nsummary(full)\n\n## Linear mixed model fit by maximum likelihood  ['lmerMod']\n## Formula: duration ~ reprocondition + parity + (1 | subject)\n##    Data: d\n## \n##      AIC      BIC   logLik deviance df.resid \n##    825.7    837.9   -407.9    815.7       79 \n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -2.2996 -0.5283 -0.1783  0.4032  3.2285 \n## \n## Random effects:\n##  Groups   Name        Variance Std.Dev.\n##  subject  (Intercept) 388.6    19.71   \n##  Residual             836.4    28.92   \n## Number of obs: 84, groups:  subject, 6\n## \n## Fixed effects:\n##                   Estimate Std. Error t value\n## (Intercept)        132.841     12.625  10.522\n## reproconditionPOP   20.293      6.311   3.215\n## parityP            109.650     17.288   6.343\n## \n## Correlation of Fixed Effects:\n##             (Intr) rprPOP\n## rprcndtnPOP -0.250       \n## parityP     -0.685  0.000\n\nreduced &lt;- lmer(data = d, duration ~ parity + (1 | subject), REML = FALSE)\nsummary(reduced)\n\n## Linear mixed model fit by maximum likelihood  ['lmerMod']\n## Formula: duration ~ parity + (1 | subject)\n##    Data: d\n## \n##      AIC      BIC   logLik deviance df.resid \n##    833.4    843.2   -412.7    825.4       80 \n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -2.4996 -0.6492 -0.1198  0.6594  2.7072 \n## \n## Random effects:\n##  Groups   Name        Variance Std.Dev.\n##  subject  (Intercept) 380.6    19.51   \n##  Residual             947.3    30.78   \n## Number of obs: 84, groups:  subject, 6\n## \n## Fixed effects:\n##             Estimate Std. Error t value\n## (Intercept)   142.99      12.22  11.697\n## parityP       109.65      17.29   6.343\n## \n## Correlation of Fixed Effects:\n##         (Intr)\n## parityP -0.707\n\n\n\nNOTE: Here, we added the argument “REML = FALSE” to the lmer() function. This is necessary to do when we want to compare models using the likelihood ratio test. Basically, REML uses a different algorithm to determine likelihood values than ordinary likelihood, and, if we want to use these likelihoods to execute an LRT, we need to use ordinary likelihood. See this site for a more complete explanation of this issue.\n\nWe then perform the likelihood ratio test using the anova() function or the lrtest() function from {lmtest}.\n\nanova(reduced, full)\n\n## Data: d\n## Models:\n## reduced: duration ~ parity + (1 | subject)\n## full: duration ~ reprocondition + parity + (1 | subject)\n##         npar    AIC    BIC  logLik deviance  Chisq Df Pr(&gt;Chisq)   \n## reduced    4 833.43 843.15 -412.72   825.43                        \n## full       5 825.72 837.88 -407.86   815.72 9.7089  1   0.001834 **\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# or\nlmtest::lrtest(reduced, full)\n\n## Likelihood ratio test\n## \n## Model 1: duration ~ parity + (1 | subject)\n## Model 2: duration ~ reprocondition + parity + (1 | subject)\n##   #Df  LogLik Df  Chisq Pr(&gt;Chisq)   \n## 1   4 -412.72                        \n## 2   5 -407.86  1 9.7089   0.001834 **\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThese results tell us that the model containing both reproductive condition and parity as fixed effects fits the data better than a model lacking reproductive condition and containing only parity as a fixed effect, while accounting for subject as a random effect.\n\n\nCHALLENGE\nNow, compare a model containing reproductive condition and parity to one containing just reproductive condition.\n\n\nShow Code\nfull &lt;- lmer(data = d, duration ~ reprocondition + parity + (1 | subject), REML = FALSE)\nreduced &lt;- lmer(data = d, duration ~ reprocondition + (1 | subject), REML = FALSE)\n\nanova(reduced, full)\n\n\nShow Output\n## Data: d\n## Models:\n## reduced: duration ~ reprocondition + (1 | subject)\n## full: duration ~ reprocondition + parity + (1 | subject)\n##         npar    AIC    BIC  logLik deviance  Chisq Df Pr(&gt;Chisq)    \n## reduced    4 835.97 845.70 -413.99   827.97                         \n## full       5 825.72 837.88 -407.86   815.72 12.251  1   0.000465 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nShow Code\nplot(predictorEffects(full, partial.residuals = TRUE))\n\n\n\n\n\n\n\n\n\nBased on this result, including parity as well as reproductive condition as fixed effects also significantly improves the fit of our model.\n\n\nCHALLENGE\nConstruct a model that includes an interaction of reproductive condition and parity and compare it to a model without the interaction term. Is the interaction of these two fixed effects significant?\n\n\nShow Code\nfull &lt;- lmer(data = d, duration ~ reprocondition * parity + (1 | subject), REML = FALSE)\nreduced &lt;- lmer(data = d, duration ~ reprocondition + parity + (1 | subject), REML = FALSE)\n\nanova(reduced, full)\n\n\nShow Output\n## Data: d\n## Models:\n## reduced: duration ~ reprocondition + parity + (1 | subject)\n## full: duration ~ reprocondition * parity + (1 | subject)\n##         npar    AIC    BIC  logLik deviance  Chisq Df Pr(&gt;Chisq)\n## reduced    5 825.72 837.88 -407.86   815.72                     \n## full       6 826.41 840.99 -407.20   814.41 1.3124  1      0.252\n\n\n\nShow Code\nplot(predictorEffects(full, partial.residuals = TRUE))\n\n\n\n\n\n\n\n\n\nIn this case, adding the interaction of reproductive condition and parity does not significantly improve the explanatory power of the model.",
    "crumbs": [
      "Part II - Statistics and Inference",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Mixed Effects or Multilevel Modeling</span>"
    ]
  },
  {
    "objectID": "24-module.html#random-slope-models",
    "href": "24-module.html#random-slope-models",
    "title": "24  Mixed Effects or Multilevel Modeling",
    "section": "24.5 Random Slope Models",
    "text": "24.5 Random Slope Models\nIn the exercise above, we included only estimation of a separate INTERCEPT for each female and presumed that the same relationships (SLOPES) between grooming duration and reproductive condition + parity obtained for all females. But we can also allow that relationship to vary from subject to subject. We would indicate this model in formula notation as follows:\n\\[grooming\\ duration \\sim reproductive\\ condition + parity\\ +\\] \\[(1 + reproductive\\ condition|subject) + (1 + parity|subject) + \\epsilon\\]\n\nm &lt;- lmer(data = d, duration ~ reprocondition + parity + (1 + reprocondition | subject) +\n    (1 + parity | subject), REML = FALSE)\nsummary(m)\n\n## Linear mixed model fit by maximum likelihood  ['lmerMod']\n## Formula: duration ~ reprocondition + parity + (1 + reprocondition | subject) +  \n##     (1 + parity | subject)\n##    Data: d\n## \n##      AIC      BIC   logLik deviance df.resid \n##    833.6    857.9   -406.8    813.6       74 \n## \n## Scaled residuals: \n##     Min      1Q  Median      3Q     Max \n## -2.4514 -0.6093 -0.1559  0.3851  3.2152 \n## \n## Random effects:\n##  Groups    Name              Variance Std.Dev. Corr \n##  subject   (Intercept)        84.020   9.166        \n##            reproconditionPOP   1.469   1.212   -1.00\n##  subject.1 (Intercept)       628.419  25.068        \n##            parityP           627.945  25.059   -1.00\n##  Residual                    835.801  28.910        \n## Number of obs: 84, groups:  subject, 6\n## \n## Fixed effects:\n##                   Estimate Std. Error t value\n## (Intercept)        132.530     16.293   8.134\n## reproconditionPOP   20.293      6.328   3.207\n## parityP            110.272     17.258   6.390\n## \n## Correlation of Fixed Effects:\n##             (Intr) rprPOP\n## rprcndtnPOP -0.211       \n## parityP     -0.902  0.000\n## optimizer (nloptwrap) convergence code: 0 (OK)\n## boundary (singular) fit: see help('isSingular')\n\n\nHere, we have changed the random effects, which now look a little more complicated. The notation “(1 + reprocondition | subject)” tells the model to estimate differing baseline levels of grooming duration (the intercept, represented by 1) as well as differing responses to the main factor in question, which is reproductive condition in this case. We do the same for parity.\n\nNOTE: It is equivalent to use just “(reprocondition | subject)” rather than “(1 + reprocondition | subject)” to specify that we want our analysis to estimate both an intercept and slope coefficient for each subject. We use the latter to be explicit, though, as we could used “(0 + reprocondition | subject)” to return a single intercept but different slopes for each subject, which is sometimes referred to as a “fixed intercept” model.\n\nLooking at the coefficients of the new model, we see the effects. Each female now has a different intercept and a different coefficient for the slopes of grooming duration as a function of both reproductive condition and parity.\n\ncoefficients(m)\n\n## $subject\n##       (Intercept) reproconditionPOP   parityP\n## Luna     144.8594          19.47768 110.25259\n## Maya     137.6452          19.95465 110.26271\n## Nina     113.0874          21.57830 110.30006\n## Nipa     139.1961          19.85212  84.78083\n## Sofia    125.3318          20.76876 140.06436\n## Vita     135.0590          20.12564 105.97018\n## \n## attr(,\"class\")\n## [1] \"coef.mer\"\n\nconfint(m, level = 0.95, method = \"boot\")\n\n##                           2.5 %    97.5 %\n## .sig01             0.000000e+00  20.46304\n## .sig02            -1.000000e+00   1.00000\n## .sig03             8.474226e-05  17.51314\n## .sig04             0.000000e+00  40.18374\n## .sig05            -1.000000e+00   0.00000\n## .sig06             1.495730e-04  40.21385\n## .sigma             2.367666e+01  32.90931\n## (Intercept)        9.694219e+01 166.72241\n## reproconditionPOP  7.617443e+00  31.37486\n## parityP            7.835865e+01 147.87633\n\n\nFinally, effects plots of how the expected amount of grooming received varies with the fixed effects (reprocondition and parity) under our new random slope model is the same as that under the random intercept model.\n\nplot(predictorEffects(m, partial.residuals = TRUE))\n\n\n\n\n\n\n\n# or\n\nplot_model(m, type = \"eff\", term = \"reprocondition\")\n\n\n\n\n\n\n\nplot_model(m, type = \"eff\", term = \"parity\")\n\n\n\n\n\n\n\n\n\nmixedup::summarize_model(m)\n\n##      Group            Effect Variance    SD SD_2.5 SD_97.5 Var_prop\n##    subject         Intercept    84.02  9.17   0.00    0.10     0.04\n##    subject reproconditionPOP     1.47  1.21   0.00   15.20     0.00\n##  subject.1         Intercept   628.42 25.07   0.00    0.10     0.29\n##  subject.1           parityP   627.95 25.06   0.00  177.15     0.29\n##   Residual                     835.80 28.91  24.90   34.12     0.38\n##               Term  Value    SE    t P_value Lower_2.5 Upper_97.5\n##          Intercept 132.53 16.29 8.13    0.00    100.60     164.46\n##  reproconditionPOP  20.29  6.33 3.21    0.00      7.89      32.70\n##            parityP 110.27 17.26 6.39    0.00     76.45     144.10\n\nmixedup::extract_fixed_effects(m)\n\n## # A tibble: 3 × 7\n##   term              value    se     t p_value lower_2.5 upper_97.5\n##   &lt;chr&gt;             &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n## 1 Intercept         133.  16.3   8.13   0        101.        164. \n## 2 reproconditionPOP  20.3  6.33  3.21   0.001      7.89       32.7\n## 3 parityP           110.  17.3   6.39   0         76.4       144.\n\n\n\nNOTE: Here, running the functions extract_random_coefficients() and extract_random_effect() would throw an error because we would be generating two (Intercept) terms per random effect level, one for each of two predictors.\n\n\n24.5.1 Residual Analysis\nOnce again, we can use the {redres} package to do some visual residual analysis…\n\nplot_resqq(m)\n\n\n\n\n\n\n\nplot_redres(m)\n\n\n\n\n\n\n\nplot_redres(m, xvar = \"subject\")\n\n\n\n\n\n\n\n\n\nNOTE: Here, running the functions plot_ranef() would throw an error because we would be generating two (Intercept) terms per random effect level, one for each of two predictors. If we wanted, we could run the ranef() function on the model, look at the $subject dataframe, and pull out the columns we wanted to plot against normal quantiles using qqPlot() or qqnorm().\n\n\n\nInference using LRTs\nTo then get p values associated with each of the fixed factors, we can use likelihood ratio tests…\n\n# random effects only\nnull &lt;- lmer(data = d, duration ~ (1 + reprocondition | subject) + (1 + parity |\n    subject), REML = FALSE)\n\n# full model with both fixed effects\nfull &lt;- lmer(data = d, duration ~ reprocondition + parity + (1 + reprocondition |\n    subject) + (1 + parity | subject), REML = FALSE)\n\n# model without reproductive condition as a fixed effect\nminusRC &lt;- lmer(data = d, duration ~ parity + (1 + reprocondition | subject) + (1 +\n    parity | subject), REML = FALSE)\n\n# model without parity as a fixed effect\nminusP &lt;- lmer(data = d, duration ~ reprocondition + (1 + reprocondition | subject) +\n    (1 + parity | subject), REML = FALSE)\n\n# p value for reproductive condition as a fixed effect\nanova(minusRC, full)\n\n## Data: d\n## Models:\n## minusRC: duration ~ parity + (1 + reprocondition | subject) + (1 + parity | subject)\n## full: duration ~ reprocondition + parity + (1 + reprocondition | subject) + (1 + parity | subject)\n##         npar    AIC    BIC  logLik deviance  Chisq Df Pr(&gt;Chisq)   \n## minusRC    9 840.23 862.11 -411.11   822.23                        \n## full      10 833.63 857.94 -406.82   813.63 8.5963  1   0.003368 **\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# p value for parity as a fixed effect\nanova(minusP, full)\n\n## Data: d\n## Models:\n## minusP: duration ~ reprocondition + (1 + reprocondition | subject) + (1 + parity | subject)\n## full: duration ~ reprocondition + parity + (1 + reprocondition | subject) + (1 + parity | subject)\n##        npar    AIC    BIC  logLik deviance  Chisq Df Pr(&gt;Chisq)   \n## minusP    9 840.08 861.96 -411.04   822.08                        \n## full     10 833.63 857.94 -406.82   813.63 8.4473  1   0.003656 **\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nplot(predictorEffects(full, partial.residuals = TRUE))\n\n\n\n\n\n\n\n\n\n\nInference using AIC\nFor a long time, the appropriateness of our mixed models was assessed as above - i.e., by evaluating the significance of each fixed effect using LRTs. As information theoretic approaches have become more popular, it is increasingly common to assess model fit by comparing the AIC values of different models, acknowledging the caveat that AIC can only tell us about the relative fit of alternative models, but not whether a particular model is a good fit, overall. Recall that AIC values are a way of inverting and scaling model log-likelihoods that penalizes models with greater numbers of parameters.\nThe aictab() function from {AICcmodavg} neatly prints out tables with AIC, Delta AIC, and log-likelihood values, along with AIC “weights”.\n\nlibrary(AICcmodavg)\n(aic_table &lt;- aictab(list(full, minusRC, minusP, null), modnames = c(\"full\", \"minusRC\",\n    \"minusP\", \"null\")))\n\n## \n## Model selection based on AICc:\n## \n##          K   AICc Delta_AICc AICcWt Cum.Wt      LL\n## full    10 836.65       0.00   0.91   0.91 -406.82\n## minusP   9 842.51       5.87   0.05   0.95 -411.04\n## minusRC  9 842.66       6.02   0.04   1.00 -411.11\n## null     8 851.47      14.82   0.00   1.00 -416.77\n\ndetach(package:AICcmodavg)\n\n\nNOTE: Here we are printing out AICc values, rather than AIC values. AICc is simply a version of AIC with a correction added for small sample sizes. To print the uncorrected AIC values, which appear in the anova() LRT output, we can add the argument “second.ord = TRUE” to the aictab() function.\n\n\\[AIC_c = AIC + \\frac{2K^2 + 2K}{n-K-1}\\]\nwhere \\(K\\) is the number of parameters and \\(n\\) is the sample size.\nIn the table, for each model, \\(K\\) is the number of model parameters, the \\(Delta\\  AICc\\) value is the difference between that model’s AICc and the best model’s AICc (again, here, that is the full model), and the \\(AICc\\ weight\\) is the relative likelihood of that model. [The weights for a particular set of models sum to 1, with each weight equal to the model’s likelihood divided by the summed likelihoods across all models.]\nWhere the best model has a very high Akaike weight, e.g., &gt;0.9, it is reasonable to base inferences about the included variables on that single most parsimonious model, but when several models rank highly (e.g., several models have Delta AICc values &lt;2 to 4), it is common to model-average effect sizes for the variables that have the most support across that set of models. That is, “model averaging” means making inferences based on a set of candidate models, instead of on a single “best” model.\nHere, note that the full model containing both reproductive condition and parity has the highest likelihood (the least negative log-likelihood value) and a much lower AICc than any of the less complex alternative models tested. It also has a very high Akaike weight (0.91).\n\nNOTE: When running a number of the above models and/or in doing the likelihood ratio tests, we saw a significant result but we also got either a warning that our null models “failed to converge” or we saw a warning about a “boundary (singular) fit”. Both of these warning are due to having a LOT of parameters we are trying to estimate relative to the number of observations we have. Dealing with lack of convergence in fitting maximum likelihood models is beyond what we can cover here, but I encourage you to explore that on your own!\n\n\n\nOther Methods for Assessing Fit\nUsing AIC values for evaluating and expressing how well a particular model fits a dataset has some critical limitations:\n\nWhile AIC provides an estimate of the relative fit of various models, it does not say anything about the absolute fit\nAIC does not address the amount of variance in a response variable explained by a model\nAIC is not comparable across datasets, and so fit is not generalizable\n\nNakagawa & Schielzeth (2013) and Nakagawa et al. (2017) have published a simple and effective method for calculating a type of pseudo-\\(R^2\\) (or coefficient of determination) value for generalized linear mixed models, and because linear mixed models are a specific type of GLMM, this method can be used with LMMs as well.\n\nSee:\n\nNakagawa, S., & Schielzeth, H. (2013). A general and simple method for obtaining R2 from generalized linear mixed-effects models. Methods in Ecology and Evolution, 4, 133–142.\nNakagawa, S., Johnson, P. C. D., & Schielzeth, H. (2017). The coefficient of determination R2 and intra-class correlation coefficient from generalized linear mixed-effects models revisited and expanded. Journal of the Royal Society Interface, 14, article 20170213.\n\n\nIn these papers, two measures are proposed for characterizing the amount of “variance explained” for mixed effects models:\n\n\\(Marginal\\ R2GLMM(m)^2\\) is the amount of variance explained on the latent (or link) scale rather than the original scale. We can interpret this as a measure of the variance explained by only the fixed effects.\n\\(Conditional\\ R2GLMM(c)^2\\) is the amount of variance explained by both fixed and random effects, i.e., by the entire model.\n\nThere is an easy way to calculate these two R2GLMM values in R using the r.squaredGLMM() function in the package {MuMIn}.\n\n\nCHALLENGE\nCompare the full, the two reduced, and the null mixed effects models from our random slope exercise using an information theoretic approach. Is the best model (full) the one that explains the greatest amount of variance in the dataset? In the full model, how much more of the total variance is explained by the random effects than by the fixed effects alone?\n\naic_table  # re-print the AIC table\n\n## \n## Model selection based on AICc:\n## \n##          K   AICc Delta_AICc AICcWt Cum.Wt      LL\n## full    10 836.65       0.00   0.91   0.91 -406.82\n## minusP   9 842.51       5.87   0.05   0.95 -411.04\n## minusRC  9 842.66       6.02   0.04   1.00 -411.11\n## null     8 851.47      14.82   0.00   1.00 -416.77\n\nlibrary(MuMIn)\nr.squaredGLMM(full)\n\n##            R2m       R2c\n## [1,] 0.7221769 0.8102366\n\nr.squaredGLMM(minusRC)\n\n##            R2m    R2c\n## [1,] 0.6778132 0.7898\n\nr.squaredGLMM(minusP)\n\n##             R2m       R2c\n## [1,] 0.01443171 0.8841458\n\nr.squaredGLMM(null)\n\n##      R2m       R2c\n## [1,]   0 0.8714428\n\ndetach(package:MuMIn)",
    "crumbs": [
      "Part II - Statistics and Inference",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Mixed Effects or Multilevel Modeling</span>"
    ]
  },
  {
    "objectID": "24-module.html#generalized-lmms",
    "href": "24-module.html#generalized-lmms",
    "title": "24  Mixed Effects or Multilevel Modeling",
    "section": "24.6 Generalized LMMs",
    "text": "24.6 Generalized LMMs\nJust as we extended our standard linear modeling approach to include non-normally distributed response variables/error structures, so too can we extend our mixed effects modeling to such situations. This is referred to as generalized linear mixed modeling, or GLMM. There are several R packages we can use to do this under either a maximum likelihood (e.g., {lme4}, {glmmML}, the no-longer-maintained {glmmboot}) or Bayesian (e.g., {MCMCglmm}, {glmmTMB}, {brms}) framework. The methods for generating maximum likelihood and Bayesian parameter estimates under GLMMs are more complicated, but conceptually, the process is an extension of what we have talked about already. Below, we explore such a scenario.\n\nCHALLENGE\nBoden-Parry et al. (2020) studied the effect of food type and abundance on the begging and food sharing behavior of otters in captivity. Here, we work with the dataset provided in the article below and replicate one of their models.\n\nBowden-Parry, M.; Postma, E.; and Boogert, N.J. (2020). Effects of food type and abundance on begging and sharing in Asian small-clawed otters (Aonyx cinereus). PeerJ 8: e10369.\n\n\nStep 1\n\nRead in the data set and look at the variables included.\n\n\nf &lt;- \"https://raw.githubusercontent.com/difiore/ada-2024-datasets/main/Bowden-ParryOtterdata.csv\"\nd &lt;- read_csv(f, col_names = TRUE)\nhead(d)\n\n## # A tibble: 6 × 22\n##   zoo   ID    fooddensity foodtype trialorder forcedclaim unsuccessfulforcedcl…¹\n##   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;         &lt;dbl&gt;       &lt;dbl&gt;                  &lt;dbl&gt;\n## 1 T     Feet  medium      trout             7           0                      0\n## 2 T     Feet  a_low       trout             8           0                      0\n## 3 T     Feet  high        trout             9           0                      0\n## 4 T     Feet  medium      crab              1           0                      0\n## 5 T     Feet  a_low       crab              2           0                      0\n## 6 T     Feet  high        crab              3           0                      0\n## # ℹ abbreviated name: ¹​unsuccessfulforcedclaim\n## # ℹ 15 more variables: activebeg &lt;dbl&gt;, passivebeg &lt;dbl&gt;, totalbeg &lt;dbl&gt;,\n## #   collectnear &lt;dbl&gt;, relaxedclaim &lt;dbl&gt;, foodgiving &lt;dbl&gt;,\n## #   totalshareproonly &lt;dbl&gt;, attackfromowner &lt;dbl&gt;, trialduration &lt;dbl&gt;,\n## #   agecategory &lt;chr&gt;, sex &lt;chr&gt;, begreceived &lt;dbl&gt;,\n## #   ownersharebecauseharassed &lt;dbl&gt;, TotalSharebothharasspro &lt;dbl&gt;,\n## #   sharingbybegonly &lt;dbl&gt;\n\n\n\n\nStep 2\n\nCreate a new random variable to joins together the variables zoo and trial. This will be used as a random effect.\nCreate a new random variable that is simply an observation number or ID. This will also be used as a random effect.\nRename the variable TotalSharebothharasspro as Shared\nRename the variable begreceived as BegReceived\n\n\n\nShow Code\nd &lt;- d |&gt;\n    mutate(trial = paste0(zoo, trialorder))\nd &lt;- rowid_to_column(d, var = \"obs\")\nd &lt;- d |&gt;\n    rename(Shared = TotalSharebothharasspro, BegRec = begreceived)\n\n\n\n\nStep 3\n\nPlot total food transferred (Shared) in relation to begging received (BegReceived).\n\n\n\nShow Code\nggplot(d, aes(x = BegRec, y = Shared)) + geom_jitter() + xlab(\"Begging Received (total number)\") +\n    ylab(\"Food Transfers (total number)\") + theme(text = element_text(size = 12))\n\n\n\n\n\n\n\n\n\n\n\nStep 4\n\nDoes the amount of begging received influence sharing frequency?\n\nTo test this, the researchers used a GLMM with Poisson error distribution to examine how the number of “food transfers” between otters (Shared) in trials was related to the total number of instances of “begging received” (BegRec) as a fixed effect.\nWe also need to consider that the response variable, Shared, is implicitly expressed as a rate, i.e., it represents a count of the number of events that occured in over a particular length of time (the variable, trial duration). This allows the observation time to vary among records in the dataset. Our regression model, then, needs to contain time on the right-hand side of the regression formula in some way to acknowledge that counts are in some way dependent on the time over which they are collected (i.e., counts are expected to only increase with time).\nAdditionally, recall that, in Poisson regression, given that our response variable is a count, what we are actually modeling as a function of our predictors is log(response)… so we need to include log(time) as what known as an offset term on the right-hand side of the formula. In R, we use the function offset() to indicate this in our regression formula. The offset term is, essentially, modeled an additional fixed effect though we will not generate a coefficient for it.\n\\[log(count) \\sim offset(log(time))\\ +\\ ...\\ other\\ predictors\\] Finally, the researchers included three random effects in their model: otter ID, trial, and an observation-level random effect.\n\nNOTE: To me, it makes little sense to include the third of these random effects as there is no variance associated with this term, but to replicate the researchers’ model, we include it.\n\n\n\nShow Code\nm1 &lt;- glmer(Shared ~ BegRec + offset(log(trialduration/60)) + (1 | ID) + (1 | trial) +\n    (1 | obs), data = d, family = poisson(link = log))\nsummary(m1)\n\n\nShow Output\n## Generalized linear mixed model fit by maximum likelihood (Laplace\n##   Approximation) [glmerMod]\n##  Family: poisson  ( log )\n## Formula: Shared ~ BegRec + offset(log(trialduration/60)) + (1 | ID) +  \n##     (1 | trial) + (1 | obs)\n##    Data: d\n## \n##      AIC      BIC   logLik deviance df.resid \n##    666.9    682.9   -328.5    656.9      175 \n## \n## Scaled residuals: \n##      Min       1Q   Median       3Q      Max \n## -1.34822 -0.80347 -0.04456  0.48868  2.15072 \n## \n## Random effects:\n##  Groups Name        Variance Std.Dev.\n##  obs    (Intercept) 0.23311  0.4828  \n##  ID     (Intercept) 0.06723  0.2593  \n##  trial  (Intercept) 0.14429  0.3799  \n## Number of obs: 180, groups:  obs, 180; ID, 20; trial, 18\n## \n## Fixed effects:\n##             Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept) -2.65525    0.14568 -18.226  &lt; 2e-16 ***\n## BegRec       0.09057    0.02543   3.562 0.000368 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Correlation of Fixed Effects:\n##        (Intr)\n## BegRec -0.372\n\n\n\nShow Code\nm2 &lt;- glmer(Shared ~ offset(log(trialduration/60)) + (1 | ID) + (1 | trial) + (1 |\n    obs), data = d, family = poisson(link = log))\n\nanova(m1, m2, test = \"F\")\n\n\nShow Output\n## Data: d\n## Models:\n## m2: Shared ~ offset(log(trialduration/60)) + (1 | ID) + (1 | trial) + (1 | obs)\n## m1: Shared ~ BegRec + offset(log(trialduration/60)) + (1 | ID) + (1 | trial) + (1 | obs)\n##    npar    AIC    BIC  logLik deviance  Chisq Df Pr(&gt;Chisq)    \n## m2    4 678.11 690.88 -335.05   670.11                         \n## m1    5 666.91 682.88 -328.46   656.91 13.193  1   0.000281 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nShow Code\n# or\nlmtest::lrtest(m1, m2)\n\n\nShow Output\n## Likelihood ratio test\n## \n## Model 1: Shared ~ BegRec + offset(log(trialduration/60)) + (1 | ID) + \n##     (1 | trial) + (1 | obs)\n## Model 2: Shared ~ offset(log(trialduration/60)) + (1 | ID) + (1 | trial) + \n##     (1 | obs)\n##   #Df  LogLik Df  Chisq Pr(&gt;Chisq)    \n## 1   5 -328.46                         \n## 2   4 -335.05 -1 13.193   0.000281 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nLooking at these results, we would conclude that the model with BegRec has a lower AIC, higher log likelihood, lower deviance than the model without BegRec, thus variance in the food sharing is associated with the amount of begging received. The coefficent for BegRec (~0.09) is positive, indicating that sharing increases with the amount of begging received.\nAgain, the {mixedup} package allows us to cleanly extract summary information from mixed effects models.\n\nmixedup::summarize_model(m1)\n\n##  Group    Effect Variance   SD Var_prop\n##    obs Intercept     0.23 0.48     0.52\n##     ID Intercept     0.07 0.26     0.15\n##  trial Intercept     0.14 0.38     0.32\n##       Term Value   SE      Z P_value Lower_2.5 Upper_97.5\n##  Intercept -2.66 0.15 -18.23    0.00     -2.94      -2.37\n##     BegRec  0.09 0.03   3.56    0.00      0.04       0.14\n\nmixedup::extract_fixed_effects(m1)\n\n## # A tibble: 2 × 7\n##   term       value    se      z p_value lower_2.5 upper_97.5\n##   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n## 1 Intercept -2.66  0.146 -18.2        0    -2.94       -2.37\n## 2 BegRec     0.091 0.025   3.56       0     0.041       0.14\n\nmixedup::extract_random_coefficients(m1) |&gt;\n    head()\n\n## # A tibble: 6 × 7\n##   group_var effect    group value    se lower_2.5 upper_97.5\n##   &lt;chr&gt;     &lt;chr&gt;     &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n## 1 obs       Intercept 1     -2.81 0.475     -3.74      -1.88\n## 2 obs       Intercept 2     -2.80 0.475     -3.74      -1.87\n## 3 obs       Intercept 3     -2.46 0.458     -3.35      -1.56\n## 4 obs       Intercept 4     -2.90 0.461     -3.80      -1.99\n## 5 obs       Intercept 5     -2.78 0.479     -3.72      -1.85\n## 6 obs       Intercept 6     -2.77 0.482     -3.71      -1.82\n\nmixedup::extract_random_effects(m1) |&gt;\n    head()\n\n## # A tibble: 6 × 7\n##   group_var effect    group  value    se lower_2.5 upper_97.5\n##   &lt;chr&gt;     &lt;chr&gt;     &lt;fct&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n## 1 obs       Intercept 1     -0.154 0.452    -1.04       0.732\n## 2 obs       Intercept 2     -0.15  0.452    -1.04       0.736\n## 3 obs       Intercept 3      0.198 0.434    -0.652      1.05 \n## 4 obs       Intercept 4     -0.241 0.437    -1.10       0.616\n## 5 obs       Intercept 5     -0.13  0.456    -1.02       0.763\n## 6 obs       Intercept 6     -0.114 0.459    -1.01       0.785\n\n\nThe glmmTMB() function from {glmmTMB} can also be used for mixed effects modeling and gives very similar results…\n\nm3 &lt;- glmmTMB(Shared ~ BegRec + offset(log(trialduration/60)) + (1 | ID) + (1 | trial) +\n    (1 | obs), data = d, family = poisson(link = \"log\"))\nsummary(m3)\n\n##  Family: poisson  ( log )\n## Formula:          Shared ~ BegRec + offset(log(trialduration/60)) + (1 | ID) +  \n##     (1 | trial) + (1 | obs)\n## Data: d\n## \n##      AIC      BIC   logLik deviance df.resid \n##    666.9    682.9   -328.5    656.9      175 \n## \n## Random effects:\n## \n## Conditional model:\n##  Groups Name        Variance Std.Dev.\n##  ID     (Intercept) 0.06723  0.2593  \n##  trial  (Intercept) 0.14429  0.3799  \n##  obs    (Intercept) 0.23311  0.4828  \n## Number of obs: 180, groups:  ID, 20; trial, 18; obs, 180\n## \n## Conditional model:\n##             Estimate Std. Error z value Pr(&gt;|z|)    \n## (Intercept) -2.65525    0.14568 -18.226  &lt; 2e-16 ***\n## BegRec       0.09057    0.02543   3.562 0.000368 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nm4 &lt;- glmmTMB(Shared ~ offset(log(trialduration/60)) + (1 | ID) + (1 | trial) + (1 |\n    obs), data = d, family = poisson(link = \"log\"))\n\nanova(m3, m4, test = \"F\")\n\n## Data: d\n## Models:\n## m4: Shared ~ offset(log(trialduration/60)) + (1 | ID) + (1 | trial) + , zi=~0, disp=~1\n## m4:     (1 | obs), zi=~0, disp=~1\n## m3: Shared ~ BegRec + offset(log(trialduration/60)) + (1 | ID) + , zi=~0, disp=~1\n## m3:     (1 | trial) + (1 | obs), zi=~0, disp=~1\n##    Df    AIC    BIC  logLik deviance  Chisq Chi Df Pr(&gt;Chisq)    \n## m4  4 678.10 690.87 -335.05   670.10                             \n## m3  5 666.91 682.88 -328.46   656.91 13.185      1  0.0002823 ***\n## ---\n## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nFinally, the {MASS} package provides yet another function, glmmPQL(), that can be used for mixed effects modeling. The structure for specifying the model is different than we have used before, with a list of the random effects being presented as a separate argument from the model including the fixed effects. Note the absence of obs as a random effect in the model below… including it causes the model to fail to run due to singular convergence, i.e., the variance in that random effect variable is essentially zero.\n\nm5 &lt;- MASS::glmmPQL(Shared ~ BegRec + offset(log(trialduration/60)), random = list(ID = ~1,\n    trial = ~1), data = d, family = poisson(link = \"log\"))\n\nmixedup::summarise_model(m5)\n\n##     Group    Effect Variance   SD Var_prop\n##        ID Intercept     0.00 0.00     0.00\n##     trial Intercept     0.00 0.00     0.00\n##  Residual        NA     2.08 1.44     1.00\n##       Term Value   SE      Z P_value Lower_2.5 Upper_97.5\n##  Intercept -2.51 0.09 -27.76    0.00     -2.69      -2.33\n##     BegRec  0.08 0.02   4.83    0.00      0.05       0.11\n\n\n\nNOTE: The coefficient values estimated by glmmPQL() are similar to, but not the same, as those estimated by glmer() and glmmTMB().",
    "crumbs": [
      "Part II - Statistics and Inference",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Mixed Effects or Multilevel Modeling</span>"
    ]
  },
  {
    "objectID": "24-module.html#concept-review",
    "href": "24-module.html#concept-review",
    "title": "24  Mixed Effects or Multilevel Modeling",
    "section": "Concept Review",
    "text": "Concept Review\n\n“Mixed” modeling extends general and generalized linear modeling to consider cases where we have additional “random” factors that are another source of possible variation in our response variable\nThe approach allows us to estimate either different intercepts or different slopes and intercepts for each level of the random factor\nAs in generalized linear modeling, likelihood ratio tests and information criteria approaches can be used to compare the explanatory power of different models\nThough we do not address it in this class, regression modeling can be extended further to consider NONLINEAR relationships among predictor variables\n\nThe R packages {lme4} and {nlme} include functions for performing for “nonlinear mixed effects modeling”\n\n\nThe website Mixed Models with R is another good resource for information about mixed effects modeling.",
    "crumbs": [
      "Part II - Statistics and Inference",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Mixed Effects or Multilevel Modeling</span>"
    ]
  }
]