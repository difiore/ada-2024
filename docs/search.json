[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Data Analysis 2024",
    "section": "",
    "text": "Overview\n\n\n\n\n\n\n\n\n\nThis course provides an overview of methods and tools for applied data analysis. It is geared toward research in biological anthropology and evolutionary biology, but the material covered is applicable to a wide range of natural, social science, and humanities disciplines. Students will receive practical, hands-on training in various data science tools and workflows, including data acquisition and wrangling, exploratory data analysis and visualization, statistical analysis and interpretation, and literate programming and version control.\nStatistical topics to be covered include basic descriptive and inferential statistics, hypothesis testing, regression, and linear modeling. Statistical inference will be considered from a frequentist perspective, introducing both parametric and permutation/resampling techniques. If we have time, I will also introduce a Bayesian perspective, although this approach will not be tackled at a particularly advanced level. Additional methods and tools will also be covered based on student interest (e.g., geospatial data analysis, phylogenetic comparative methods, social network analysis, text corpus construction and mining, population genetic analysis) and on how quickly the class feels moving forward.\nThe course particularly emphasizes the development of data science skills, focusing on the practical side of data manipulation, analysis, and visualization. Students will learn to use the statistical programming language R as well as other useful software tools (e.g., text editors, shell scripts, databases, query languages, and version control systems).\n\n\nThis class is supported by DataCamp, an intuitive online learning platform for data science. Learn R, Python, and SQL the way you learn best, through a combination of short expert videos and hands-on-the-keyboard exercises. Take over 100+ courses by expert instructors on topics such as importing data, data visualization or machine learning and learn faster through immediate and personalised feedback on every exercise."
  },
  {
    "objectID": "00-course-logistics.html",
    "href": "00-course-logistics.html",
    "title": "2  Course Logistics",
    "section": "",
    "text": "Course Logistics"
  },
  {
    "objectID": "00-course-logistics.html#learning-objectives",
    "href": "00-course-logistics.html#learning-objectives",
    "title": "2  Course Logistics",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nBy the end of this course, you should:\n\nbe familiar with key concepts and methods in applied data science for acquiring and managing data, conducting exploratory data analyses, testing statistical hypotheses, building models to classify and make predictions about data, and evaluating model performance;\nhave a facility with modern tools for data analysis, (e.g., the R programming environment, version control systems, the Unix command line, web APIs) and be able to apply “best practices” in data science;\nknow how to interact with both local and remote data sources to store, query, process, and analyze data presented a variety of common formats (e.g., delimited text files, structured text files, various database systems);\nbe comfortable writing simple computer programs/scripts for data management, statistical analysis, visualization, and more specialized applications;\nknow how to design and implement reproducible data science workflows that take a project from data acquisition to analysis to presentation and be able to organize your work using a version control system;\nand be able to apply all of these tools to questions of interest in the natural and social sciences."
  },
  {
    "objectID": "00-course-logistics.html#prerequisites",
    "href": "00-course-logistics.html#prerequisites",
    "title": "2  Course Logistics",
    "section": "Prerequisites",
    "text": "Prerequisites\nAt least one semester of introductory statistics is recommended. Prior programming experience is not expected, but would be helpful!"
  },
  {
    "objectID": "00-course-logistics.html#texts",
    "href": "00-course-logistics.html#texts",
    "title": "2  Course Logistics",
    "section": "Texts",
    "text": "Texts\nThere are no required texts for this course, but we will be covering useful material from a number of the following books, all of which are excellent resources for learning basic to intermediate level statistics and R programming.\n\nDavies, T.M. (2016). The Book of R: A First Course in Programming and Statistics. No Starch Press.\nBaumer, B.S., Kaplan, D.T., & Horton, N.J. (2017). Modern Data Science with R. Chapman & Hall/CRC.\nIsmay, C. & Kim, A.Y. (2019). Statistical Inference via Data Science: A ModernDive into R and the Tidyverse. Chapman & Hall/CRC.\nKabacoff, R. (2022). R in Action: Data Analysis and Graphics with R (Third Edition). Manning Publications Co.\nWickham, H. and Grolemund, G. (2017). R for Data Science. O’Reilly Media, Inc.\n\nThese are available in print or electronic format directly from the publishers - e.g., No Starch Press, O’Reilly Media, Inc., Manning Publications Co. - or from Amazon.com."
  },
  {
    "objectID": "00-course-logistics.html#other-resources",
    "href": "00-course-logistics.html#other-resources",
    "title": "2  Course Logistics",
    "section": "Other Resources",
    "text": "Other Resources\n\nCheatsheets\n\nBase R\nAdvanced R\nR Reference Card\nMarkdown and GitHub Flavored Markdown\nRMarkdown 1\nRMarkdown 2\nRMarkdown Reference Guide\nLearning RMarkdown\nRStudio IDE\nData Import\nData Transformation with {dplyr}\nData Wrangling with {dplyr} and {tidyr}\nTypes of Regression (R in Action Table 8.1)\nRegression Syntax (R in Action Table 8.2)\nUseful Functions for Regression Models (R in Action Table 8.3)\n{leaflet} for Interactive Mapping\nBasics of Probability\n{shiny} Tutorial 1\n{shiny} Tutorial 2\n\n\n\nSoftware Tools\n\nProgramming Languages\n\nR (MacOS, Windows, Linux)\nPython (MacOS, Windows, Linux)\nJulia (MacOS, Windows, Linux)\n\n\n\nText Editors\n\nAtom (MacOS, Windows)\nBB Edit (MacOS)\nNotepad++ (Windows)\nVisual Studio Code (Window, MacOS, Linux)\n\n\n\nMarkdown Editors\n\nMacDown (MacOS)\nMarkdownPad2 (Windows)\n\n\n\nIDEs\n\nRStudio for R (MacOS, Windows, Linux)\n\n\n\nVersion Control Tools\n\nGitHub (Website)\nGitHub Desktop (MacOS, Windows)\n\n\n\n\nWeb Resources\n\nCRAN (Comprehensive R Archive Network)\nDataCamp\nSoftware Carpentry\nData Carpentry\nrOpenSci\nStack Overflow\nOnline R Exercises\nR-bloggers\nMockaroo\n\n\n\nBooks\n\nStatistical Modeling in Biology\n\nBolker, B.M. (2008). Ecological Models and Data in R. Princeton University Press.\nIrizarry, R.A. & Love, M.I. (2015). Data Analysis for the Life Sciences. Lean Publishing.\nQuinn, G.P. & Keough, M.J. (2002). Experimental Design and Data Analysis for Biologists. Cambridge University Press.\n\n\n\nR and Basic Statistics\n\nCaffo, B. (2015). Statistical Inference for Data Science. Lean Publishing.\nCaffo, B. (2016). Regression Models for Data Science in R. Lean Publishing.\nChihara, L.M. & Hesterberg, T.C. (2018). Mathematical Statistics with Resampling and R. John Wiley & Sons, Inc.\nCrawley, M.J. (2014). Statistics: An Introduction Using R. (Second Edition). John Wiley & Sons, Inc.\nDalgaard, P. (2008). Introductory Statistics with R (Second Edition). Springer.\nDiez, D., Çetinkaya-Rundel, M., & Barr, C.D. (2019). OpenIntro Statistics (Fourth Edition). OpenIntro.org.\nIrizarry, R.A. (2019). Introduction to Data Science. Lean Publishing.\nIsmay, C. & Kim, A.Y. (2019). Statistical Inference via Data Science: A ModernDive into R and the Tidyverse. Chapman & Hall/CRC.\nJames, G., Witten, D., Hastie, T., & Tibshirani, R. (2013). An Introduction to Statistical Learning. Springer.\nShahbaba, B. (2012). Biostatistics with R. Springer.\nWolfe, D.A. & Schneider, G. (2017). Intuitive Introductory Statistics. Springer.\n\n\n\nR Programming\n\nDavies, T.M. (2016). The Book of R: A First Course in Programming and Statistics. No Starch Press.\nKabacoff, R. (2022). R in Action: Data Analysis and Graphics with R (Third Edition). Manning Publications Co.\nMatloff, N. (2011). The Art of R Programming. No Starch Press.\nPeng, R. (2016). R Programming for Data Science. Lean Publishing.\nPeng, R. (2016). Exploratory Data Analysis with R. Lean Publishing.\nWickham, H. (2015). Advanced R. Chapman & Hall/CRC.\nWickham, H. (2019). Advanced R. (Second Edition). Chapman & Hall/CRC.\nZuur, A.F., Ieno, E.N., & Meesters, E.H.W.G. (2009). A Beginner’s Guide to R. Springer.\n\n\n\nR Reference\n\nAdler, J. (2009). R in a Nutshell. O’Reilly Media, Inc.\nCrawley, M.J. (2012). The R Book (Second Edition). John Wiley & Sons, Inc.\nEkstrøm, C. T. (2016). The R Primer (Second Edition). Chapman & Hall/CRC.\nGardener, M. (2012). The Essential R Reference. John Wiley & Sons, Inc.\nTeetor, P. (2011). R Cookbook. O’Reilly Media, Inc.\n\n\n\nR Graphics\n\nChang, W. (2013). R Graphics Cookbook. O’Reilly Media, Inc.\nWickham, H. (2016). ggplot2: Elegant Graphics for Data Analysis (Second Edition). Springer.\n\n\n\nData Science\n\nBaumer, B.S., Kaplan, D.T., & Horton, N.J. (2017). Modern Data Science with R. Chapman & Hall/CRC.\nBruce, P. & Bruce, A. (2017). Practical Statistics for Data Scientists. O’Reilly Media, Inc.\nCady, F. (2017). The Data Science Handbook. John Wiley & Sons, Inc.\nGrus, J. (2015). Data Science from Scratch. O’Reilly Media, Inc.\nIsmay, C. & Kim, A.Y. (2019). Statistical Inference via Data Science: A ModernDive into R and the Tidyverse. Chapman & Hall/CRC.\nLarose, C.D. & Larose D.T. (2019). Data Science Using Python and R. John Wiley & Sons, Inc.\nMaillund, T. (2016). Introduction to Data Science and Statistical Programming in R. Lean Publishing.\nMcNicholas, P.D. & Tait, P.A. (2019). Data Science with Julia. Chapman & Hall/CRC.\nPearson, R.K. (2018). Exploratory Data Analysis Using R. Chapman & Hall/CRC.\nPeng, R.D. & Matsui, E. (2015). The Art of Data Science. Lean Publishing.\nWickham, H. & Grolemund, G. (2017). R for Data Science. O’Reilly Media, Inc.\nWilliams, G.J. (2017). The Essentials of Data Science. Chapman & Hall/CRC.\nZumel, N. & Mount, J. (2020). Practical Data Science with R, Second Edition. Manning Publications Co.\n\n\n\nData Visualization\n\nDale, K. (2016). Data Visualization with Python and JavaScript. O’Reilly Media, Inc.\nHealy, K. (2018). Data Visualization: A Practical Introduction. Princeton University Press.\nThomas, S.A. (2015). Data Visualization with JavaScript. No Starch Press.\nWilke, C.O. (2019) Fundamentals of Data Visualization. O’Reilly Media, Inc.\n\n\n\nSpatial Data Analysis\n\nBivand, R.S., Pebesma, E., & Gómez-Rubio, V. (2013). Applied Spatial Data Analysis with R (Second Edition). Springer.\nBrundson, C. & Comber, L. (2019). An Introduction to R for Spatial Analysis and Mapping (Second Edition). SAGE.\nBrunsdon, C. & Singleton, A.D. (Eds.). (2015). Geocomputation: A Practical Primer. Los Angeles: SAGE.\nLovelace, R., Nowosad, J., & Muenchow, J. (2019). Geocomputation with R. Chapman & Hall/CRC.\n\n\n\nR and Bayesian Statistics\n\nBolstad, W.M. & Curran, J.M. (2017). Introduction to Bayesian Statistics (Third Edition). John Wiley & Sons, Inc.\nKruschke, J.K. (2015). Doing Bayesian Data Analysis: A Tutorial with R, JAGS, and Stan (Second Edition). Elsevier.\nMcElreath, R. (2019). Statistical Rethinking: A Bayesian Course with Examples in R and Stan (Second Edition). Chapman & Hall/CRC.\n\n\n\nGeneral and Generalized Regression, Mixed Effects, and Multilevel/Hierarchical Modeling\n\nBurnham, K.P. & Anderson, D.R. (2002). Model Selection and Multimodel Inference. Springer.\nDunn, P.K. & Smyth, G.K. (2018). Generalized Linear Models With Examples in R. Springer.\nFox, J. (2016). Applied Regression Analysis and Generalized Linear Models (Third Edition). SAGE.\nFox, J. & Weisberg, S. (2019). An R Companion to Applied Regression. SAGE.\nGelman, A. & Hill, J. (2007). Data Analysis Using Regression and Multilevel/Hierarchical Models. Cambridge University Press.\nHoffman, J.P. (2022). Linear Regression Models: Applications in R. Chapman & Hall/CRC.\nZuur, A.F., Ieno, E.N., Walker, N.J., Savaliev, A.A., & Smith, G.M. (2009). Mixed Effects Models and Extensions in Ecology with R. Springer.\n\n\n\nWeb Scraping, Text Mining, and Text Analysis\n\nFriedl, J.E.F. (2000). Mastering Regular Expressions (Third Edition). O’Reilly Media, Inc.\nMitchell, R. (2015). Web Scraping with Python. O’Reilly Media, Inc.\nNolan, D. & Temple Lang, D. (2014). XML and Web Technologies for Data Sciences with R. Springer.\nSilge, J. & Robinson, D. (2017). Text Mining with R: A Tidy Approach. O’Reilly Media, Inc.\n\n\n\nR Packages, R Markdown, and Reproducible Research\n\nGandrud, C. (2020). Reproducible Research with R and RStudio (Third Edition). Chapman & Hall/CRC.\nWickham, H. (2015). R Packages. O’Reilly Media, Inc.\nXie, Y. (2017). Bookdown: Authoring Books and Technical Documents with RMarkdown. Chapman & Hall/CRC.\nXie, Y., Allaire, J.J., & Grolemund, G. (2018). R Markdown: The Definitive Guide. Chapman & Hall/CRC.\n\n\n\ngit and Unix Shell Tools\n\nAlbing, C., Vossen, J.P., & Newham, C. (2007). Bash Cookbook. O’Reilly Media, Inc.\nBarrett, D.J. (2016). Linux Pocket Guide: Essential Commands (Third Edition). O’Reilly Media, Inc.\nChacon, S. & Straub, B. (2014). Pro Git (Second Edition). Apress.\nDougherty, D. & Robbins, A. (1998). Sed and Awk (Second Edition). O’Reilly Media, Inc.\nNewham, C. & Rosenblatt, B. (2005). Learning the bash Shell (Third Edition). O’Reilly Media, Inc.\nRobbins, A. (2006). UNIX in a Nutshell (Fourth Edition). O’Reilly Media, Inc.\n\n\n\nStatistics and Programming in Python\n\nBeazley, D. & Jones, B.K. (2013). Python Cookbook (Third Edition). O’Reilly Media, Inc.\nDowney, A.B. (2012). Think Python. O’Reilly Media, Inc.\nDowney, A. (2014). Think Stats (Second Edition). O’Reilly Media, Inc.\nKazil, J. & Jarmul, K. (2016). Data Wrangling with Python. O’Reilly Media, Inc.\nLubanovic, B. (2014). Introducing Python. O’Reilly Media, Inc.\nLee, K.D. (2011). Python Programming Fundamentals. Springer.\nLutz, M. (2013). Learning Python (Fifth Edition). O’Reilly Media, Inc.\nLutz, M. (2014). Python Pocket Reference (Fifth Edition). O’Reilly Media, Inc.\nMcKinney, W. (2013). Python for Data Analysis. O’Reilly Media, Inc.\nVanderPlas, J. (2016). Python Data Science Handbook. O’Reilly Media, Inc.\n\n\n\nDatabases and SQL\n\nDeBarros, A. (2018). Practical SQL: A Beginner’s Guide to Storytelling with Data. No Starch Press.\nKreibich, J.A. (2010). Using SQLite. O’Reilly Media, Inc.\nObe, R.O. & Hsu, L.S. (2012). PostgreSQL: Up and Running. O’Reilly Media, Inc.\nRobinson, I., Webber, J., & Eifrem, E. (2015). Graph Databases (Second Edition). O’Reilly Media, Inc."
  },
  {
    "objectID": "00-typography-and-formatting.html",
    "href": "00-typography-and-formatting.html",
    "title": "3  Typography and Formatting",
    "section": "",
    "text": "To the extent possible, I have tried to follow the following typographic and formatting conventions throughout the course modules.\n\nProgram names are written in bold italics:\n\nR\nRStudio\n\nFunctions, commands, and R code are written as inline code, e.g., x &lt;- 5, or in code blocks:\n\nx &lt;- 5\nprint(x)\n\nPackage names are written in {curly braces}:\n\n{tidyverse}\n{lubridate}\n\nVariable names (for vectors, data frames and other tabular data, etc.) are written in bold:\n\nx\ny\nairline_flights\n\nColumn names within a data frame are written in bold, whether referred to separately or as part of the table:\n\norigin\ndestination\nairline_flights$origin\nairline_flights[[“destination”]]\n\nFilenames and file types are written in “quotation marks”:\n\n“myData.R”\n“.csv”\n\nFull file path names are written in “quotation marks”:\n\n“/Users/Tony/Desktop/myData.R”\n“~/Desktop/myData.R”\n“C:and SettingsDi Fiore.R”\n\nDirectory names are written as inline code followed by a slash:\n\nimg/, src/\n\nImportant concepts are written in italics when first referred to:\n\nworking directory\nenvironment\nnamespace\n\nMenu names and menu commands are written in bold:\n\nFile &gt; New File &gt; R Script\n\nArgument values or values to be replaced are written in lowercase text between &lt;angle brackets&gt;, where that entire text, brackets included, should be replaced with the text being asked for:\n\nsetwd(\"&lt;your working directory&gt;\")\n“.csv”\n\nConstants are written in italics:\n\npi\n\nArgument names and assignments are written as inline code:\n\nSet na.rm=TRUE\nSet data=df\nSet filename=\"~/Users/Tony/Desktop/output.csv\"\n\nNames of RStudio panes are written in bold:\n\nConsole\nEnvironment/History\n\nNames of RStudio tabs within panes are written in italics:\n\nHistory\nPlots\nHelp\nGit\n\nNames of dialog boxes are written in italics:\n\nGlobal Options\n\nButton names and sections within dialog boxes are written in quotation marks:\n\n“OK”\n“Cancel”\n\nCheck box names within dialog boxes are written in inline code:\n\nRestore .RData into workspace at startup\n\nR object class names are written in bold:\n\nnumeric\nfunction\n\ngit repository branch names are written as inline code:\n\nmain\norigin/main\n\nFull URLs/links are written in inline code:\n\nhttps://cran.r-project.org/\nhttps://difiore.github.io/ada-2022/"
  },
  {
    "objectID": "00-programming-style-guide.html#file-type-conventions",
    "href": "00-programming-style-guide.html#file-type-conventions",
    "title": "4  Programming Style Guide",
    "section": "File Type Conventions",
    "text": "File Type Conventions\n\nUse the uppercase “.R” extension for files containing R code\nUse the “.RData” extension for files that contain binary data\nUse the “.Rmd” extension for RMarkdown documents\nUse the “.qmd” extension for Quarto documents\nUse lowercase file extensions for other standard filetypes (e.g., “.csv”, “.jpg”, “.docx”, “.xlsx”)"
  },
  {
    "objectID": "00-programming-style-guide.html#stylistic-conventions",
    "href": "00-programming-style-guide.html#stylistic-conventions",
    "title": "4  Programming Style Guide",
    "section": "Stylistic Conventions",
    "text": "Stylistic Conventions\n\nUse a space before and after the standard backwards assignment operator &lt;- and other infix operators (except for = used in function arguments), but not around parentheses or brackets:\n\nx &lt;- \"Hello\"\n\nEven though the syntax is valid, avoid using = for assignment, except when assigning values to named arguments in a function:\n\nrnorm(n=1000, mean=50, sd=10)\n\nEven though the syntax is valid, do not abbreviate TRUE and FALSE to T and F\nGenerally avoid using the forward assignment operator -&gt; except at the end of a sequence of piped operations:\n\ndf &lt;- df %&gt;% filter(age &gt; 50) %&gt;% select(name, age, sex, body_weight)\ndf %&gt;% filter(age &gt; 50) %&gt;% select(name, age, sex, body_weight) -&gt; df\n\nUse a space after a comma when listing the arguments of a function:\n\nx &lt;- c(4, 5, 6, 7)\npaste(\"Data science\", \"is\", \"cool\", sep=\" \")"
  },
  {
    "objectID": "00-programming-style-guide.html#programming-conventions",
    "href": "00-programming-style-guide.html#programming-conventions",
    "title": "4  Programming Style Guide",
    "section": "Programming Conventions",
    "text": "Programming Conventions\n\nUse simple, single characters for temporary variables, like indices:\n\nx &lt;- 1:10\nfor (i in 1:100){print(i)}\n\nWhenever possible, use short, descriptive names for variables:\n\nrate &lt;- 5.6\nsex &lt;- c(\"M\", \"F\", \"F\", \"M\", \"F\", \"M\" \"F\", \"M\")\n\nFor longer, multi-word variable, function, or argument names, use either camelCase or snake_case:\n\ninterestRate &lt;- 0.45\nsay_hi &lt;- function(x){print(paste0(\"Hello, \",x))}\nprint_n_rows &lt;- function(x, n_rows=10){print(x[n_rows,])}\n\nInclude default values in your function definitions:\n\nn_rows=10 in the preceding example\n\nInclude error checking in your functions\nFor support files that contain a single function, name the file to match the name of the function defined in the file:\n\n“prettyPrint.R” for a file that contains the function prettyPrint()\n“rescale_image.R” for a file that contains the function rescale_image()"
  },
  {
    "objectID": "00-programming-style-guide.html#code-formatting-conventions",
    "href": "00-programming-style-guide.html#code-formatting-conventions",
    "title": "4  Programming Style Guide",
    "section": "Code Formatting Conventions",
    "text": "Code Formatting Conventions\n\nTry to keep lines of code to less than 80 characters\nUse comments liberally to make notes about what you code does\n\nR ignores lines starting with the hashtag character (#) as well as text after this character (until it encounters a line break)\n\n# assign `g`, the constant for gravitational acceleration\ng &lt;- 9.80665 # units are m/s^2\n\nUse a single # to introduce a comment, and separate comments from code with a single empty line before the comment:\n\nx &lt;- 3\n\n# Now add 2 to x...\nx &lt;- x + 2\n\nIn RStudio, use four dashes ---- at the end of a comment line to indicate a section… this should allow for code folding in your scripts:\n\n# Section 1 ----\nx &lt;- 5\ny &lt;- 3\nz &lt;- x + y^2\n\n\n\n\nNOTE: In RStudio, you can highlight several lines and then use ⌘-SHIFT-C to comment/uncomment multiple lines simultaneously.\n\n\nUse indentation to identify (nested) blocks of code\n\nUse spaces rather than the invisible tab (\\t) character for indentation\nUse consistent indentation (e.g., 2 spaces, 4 spaces) to keep your code looking neat\n\n\n\n\n\n\n\n\nUse a linter (see under the “Addins” section of the RStudio toolbar) to catch common style “errors”\n\n\nNOTE: In RStudio, you can use ⌘-SHIFT-A within in an R code block to try to neatly and consistently reformat your code. Also, when working in the text editor in RStudio, holding the option (⌥) key while selecting with the cursor allows you to highlight/edit replace text in multiple rows simultaneously."
  },
  {
    "objectID": "00-programming-style-guide.html#version-control-system",
    "href": "00-programming-style-guide.html#version-control-system",
    "title": "4  Programming Style Guide",
    "section": "Version Control System",
    "text": "Version Control System\n\nFinally, always, always, always use a version control system!!! 😃 See Module 5 and Module 6 for more details."
  },
  {
    "objectID": "00-course-schedule.html#part-i---using-r-and-rstudio",
    "href": "00-course-schedule.html#part-i---using-r-and-rstudio",
    "title": "5  Course Schedule",
    "section": "Part I - Using R and RStudio",
    "text": "Part I - Using R and RStudio\n\nAn Introduction to R\n\nModules\n\nModule 01 - Getting Started with R\nModule 02 - Getting Started with RStudio\nModule 03 - Extending the Functionality of R\nModule 04 - Fundamentals of the R Language\n\n\n\nTopics\n\nHistory of R\n\nRelation to other languages and statistics software\n\nInstalling R and RStudio\nUsing R and RStudio in the cloud\nSetting up your RStudio workspace\n\nPanels: Source, Console, Environment/History, Other Views\n\nConfiguration and customization\n\nSetting the working directory\nSaving workspaces\n\nR documentation and getting help\n\nThe ? command\nVignettes\nStack Overflow\n\nR Basics\n\nUsing R interactively\nVariables and assignment\nPackages\n\nInstalling and updating\nDependencies\n\nR objects\n\nObject types - Vectors, simple functions, and environments\nClasses and attributes of objects\nScripting and sourcing scripts\n\n\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 1 - Introduction\nChapter 2 - R Basics\n\nR in Action, Second Edition\n\nChapter 1 - Getting Started\nChapter 2 - Creating a Dataset\n\n\n\n\nOther Useful Readings\n\nThe Book of R\n\nChapter 1 - Getting Started\nChapter 2 - Numerics, Arithmetic, Assignment, and Vectors\n\nR Programming for Data Science\n\nChapter 3 - History and Overview of R\nChapter 5 - R Nuts and Bolts\n\nStatistics: An Introduction Using R\n\nChapter 1 - Fundamentals\nAppendix: Essentials of the R Language\n\nAdvanced R, First Edition\n\nChapter 2 - Data Structures\n\nModern Data Science with R\n\nAppendix B: An Introduction to R and RStudio\n\n\n\n\n\nVersion Control and Reproducibility\n\nModules\n\nModule 05 - Basics of Version Control\nModule 06 - Reproducible Research Using RStudio\nSome recommendations on Programming Style\n\n\n\nTopics\n\nGood programming practices\n\nVersion control with git and GitHub\nData workflow with R Projects using local and remote repositories\nReproducible research using Rmarkdown and {knitr}\nProgramming conventions and style\n\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 39 - Git and GitHub\n\nEssentials of Data Science\n\nChapter 11 - R with Style\n\n\n\n\nOther Useful Readings\n\nHappy Git and GitHub for the useR\nIntroduction to Data Science\n\nChapter 37 - Accessing the terminal and installing Git\nChapter 38 - Organizing with Unix\nChapter 40 - Reproducible projects with RStudio and R Markdown\n\n\n\n\n\nData Science Preliminaries\n\nModules\n\nModule 07 - Additional Data Structures in R\nModule 08 - Getting Data into R\n\n\n\nTopics\n\nWorking with data\n\nThe Tao of text\nMore object types - matrices, n-dimensional arrays, lists, data frames, and other tabular structures (e.g., data tables and “tibbles”)\nSubsetting and filtering data structures\n\nSingle bracket ([]) notation\nDouble bracket ([[]]) notation\n$ notation\n\nFactors\nClass coercion and conversion\nSpecial data values - NA, NaN, Inf\nGetting data in and out of R\n\nFrom csv files - {readr}\nFrom Excel - {readxl} and others\nFrom Dropbox - {rdrop2}\nFrom other online resources - {curl}\nFrom databases - {RMySQL}, {RSQLite}, {RPostgreSQL} and others\n\n\n\n\n\nSuggested Readings\n\nThe Book of R\n\nChapter 3 - Matrices and Arrays\nChapter 5 - Lists and Data Frames\n\nR in Action\n\nChapter 4 - Basic Data Management\n\n\n\n\nOther Useful Readings\n\nThe Book of R\n\nChapter 4 - Non-Numeric Values\nChapter 6 - Special Values, Classes, and Coercion\nChapter 8 - Reading and Writing Files\n\nAdvanced R\n\nChapter 4 - Subsetting\n\nR for Data Science\n\nChapter 8 - Data Import with readr\n\n\n\n\n\nExploratory Data Analysis\n\nModules\n\nModule 09 - Exploratory Data Analysis\n\n\n\nTopics\n\nSummarizing and visualizing data\n\nBasic descriptive statistics\nTidying and reshaping data with {tidyr}\nSimple plotting (boxplots, histograms, scatterplots) with {base} R, {ggplot2}, and others\n\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 5 - The tidyverse\n\nR in Action\n\nChapter 6 - Basic Graphs\nChapter 7 - Basic Statistics\n\n\n\n\nOther Useful Readings\n\nThe Book of R\n\nChapter 13 - Elementary Statistics\nChapter 14 - Basic Data Visualization\n\nR for Data Science\n\nChapter 9 - Tidy Data with tidyr\n\n\n\n\n\nData Wrangling and Programming\n\nModules\n\nModule 10 - Data Wrangling with {dplyr}\nModule 11 - Functions and Flow Control\n\n\n\nTopics\n\nManipulating data\n\n{dplyr} functions - select(), filter(), arrange(), rename(), mutate(), group_by(), summarize()\nChaining and piping data\n\nR programming practices\n\nWriting functions\n\nArgument lists\nDefault values\n\nProgram flow control\n\nConditional statements\nfor() loops\nwhile() loops\n\n\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 4 - Programming Basics\n\n\n\n\nOther Useful Readings\n\nThe Book of R\n\nChapter 9 - Calling Functions\nChapter 10 - Conditions and Loops\nChapter 11 - Writing Functions\n\nR for Data Science\n\nChapter 10 - Relational Data with dplyr\n\nR in Action\n\nChapter 5 - Advanced Data Management"
  },
  {
    "objectID": "00-course-schedule.html#part-ii---statistics-and-inference",
    "href": "00-course-schedule.html#part-ii---statistics-and-inference",
    "title": "5  Course Schedule",
    "section": "Part II - Statistics and Inference",
    "text": "Part II - Statistics and Inference\n\nLocation, Spread, and Sampling\n\nModules\n\nModule 12 - Location, Central Tendency, and Spread\n\n\n\nTopics\n\nPopulations and samples, parameters and statistics\nDescribing central tendency and variance\nStandard errors and quantiles\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 15 - Random Variables\n\nStatistical Inference via Data Science\n\nChapter 7 - Sampling\n\nModern Data Science with R\n\nChapter 7 - Statistical Foundations\n\n\n\n\nOther Useful Readings\n\nStatistics: An Introduction Using R\n\nChapter 13 - Central Tendemcy\nChapter 14 - Variance\n\nR Programming for Data Science\n\nChapter 22 - Simulation\n\n\n\n\n\nProbability and Distributions\n\nModules\n\nModule 13 - Probability and Distributions\n\n\n\nTopics\n\nProbability and conditional probability\nRandom variables - discrete and continuous\nProbability mass functions, probability density functions\nCumulative probability function\nSome useful distributions and their properties\n\nDistribution functions\n\nDensity (d)\nCumulative probability (p)\nQuantile (q)\nRandom (r) functions\n\nDiscrete distributions\n\nBernoulli\nPoisson\nBinomial\n\nContinuous distributions\n\nBeta\nUniform\nNormal\n\n\nQ-Q plots\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 14 - Probability\n\nThe Book of R\n\nChapter 15 - Probability\nChapter 16 - Common Probability Distributions\n\n\n\n\n\nConfidence Intervals\n\nModules\n\nModule 14 - Confidence Intervals\n\n\n\nTopics\n\nStandard errors and confidence intervals\n\nCIs based on a theoretical distribution\nThe Central Limit Theorem\nCIs based on bootstrapping\nCIs for proportions\n\n\n\n\nSuggested Readings\n\nIntroduction to Data Science\n\nChapter 16 - Statistical Inference\n\nThe Book of R\n\nChapter 17 - Sampling Distributions and Confidence\n\n\n\n\nOther Useful Readings\n\nStatistical Inference via Data Science\n\nChapter 8 - Bootstrapping and Confidence Intervals\n\n\n\n\n\nHypothesis Testing\n\nModules\n\nModule 15 - Classical Hypothesis Testing\nModule 16 - Permutation and Randomization Tests\nModule 17 - Error, Power, and Effect Size\n\n\n\nTopics\n\nSignificance and p values\nClassic Null Hypothesis Significance Testing (NHST)\n\nOne- and two-sample \\(T\\) and \\(Z\\) tests\n\nPermutation and randomization Tests\nType I and Type II error\nStatistical power, effect sizes\n\n\n\nSuggested Readings\n\nThe Book of R\n\nChapter 18 - Hypothesis Testing\n\nStatistical Inference via Data Science\n\nChapter 9 - Hypothesis Testing\n\nLegendre & Legendre (2012). Chapter 1.2. Statistical testing by permutation. Numerical Ecology, 3rd Edition. Elsevier.\n\n\n\nOther Useful Readings\n\nStatistics Done Wrong\n\nChapter 1 - An Introduction to Statistical Significance\n\nStatistics: An Introduction Using R\n\nChapter 5 - Single Samples\nChapter 6 - Two Samples\n\n\n\n\nRelevant Data Camp Material\n\nFoundations of Inference - Introduction to Ideas of Inference\nFoundations of Inference - Confidence Intervals\nFoundations of Inference - Completing a Randomization Test\nFoundations of Inference - Hypothesis Testing Errors\n\n\n\n\nIntroduction to Linear Modeling\n\nModules\n\nModule 18 - Introduction to Linear Regression\n\n\n\nTopics\n\nCorrelation and covariation\nBasic linear modeling\n\nContinuous random predictor and response variables\nSimple linear regression (1 predictor and 1 response variable)\nEstimating and interpreting regression coefficients\nModel I versus Model II regression\nThe lm() function\n\n\n\n\nSuggested Readings\n\nThe Book of R\n\nChapter 20 - Simple Linear Regression\n\n\n\n\nOther Useful Readings\n\nStatistics: An Introduction Using R\n\nChapter 7 - Regression\n\nStatistical Inference via Data Science\n\nChapter 5 - Basic Regression\n\n\n\n\nRelevant Data Camp Material\n\nCorrelation and Regression in R - Visualizing Two Variables\nCorrelation and Regression in R - Correlation\nCorrelation and Regression in R - Simple Linear Regression\nCorrelation and Regression in R - Interpreting Regression Models\n\n\n\n\nElements of Regression Analysis\n\nModules\n\nModule 19 - Elements of Regression Analysis\n\n\n\nTopics\n\nInference in regression\n\nEstimating standard errors for regression cofficients\nConfidence intervals and prediction intervals\nResiduals\n\nModel checking\nPartitioning of variance in linear models\nData transformations\n\n\n\nSuggested Readings\n\nStatistical Inference via Data Science\n\nChapter 10 - Inference for Regression\n\n\n\n\nOther Useful Readings\n\nGotelli, N.J. & Ellison, A.M. (2012). Chapter 9. Regression. A Primer of Ecological Statistics, 2nd Edition. Sinauer Associates, Inc.\n\n\n\n\nExtending Linear Regression\n\nModules\n\nModule 20 - Categorical Data Analysis\nModule 21 - Multiple Regression and ANCOVA\n\n\n\nTopics\n\nRegression with categorical predictors\n\nOne- and multiple-factor ANOVA\nType I, Type II, Type III sums of squares\nInteraction plots to visualize changes across groups\n\nSimple categorical data analysis\n\nKruskall-Wallis tests\nChi-Square tests of goodness-of-fit and independence\n\nGenerating mock data with a defined correlation structure\nRegression with multiple predictors\n\nMore than one continuous predictor\nCombinations of continuous and categorical predictors\nVisualizing linear models with more than one predictor\nConfidence intervals and prediction in multiple regression\nInteractions between predictors\nInteraction plots to visualize changes across groups\n\n\n\n\nSuggested Readings\n\nThe Book of R\n\nChapter 19 - Analysis of Variance\nChapter 21 - Multiple Linear Regression\n\n\n\n\nOther Useful Readings\n\nGotelli, N.J. & Ellison, A.M. (2012). Chapter 10. The analysis of variance. A Primer of Ecological Statistics, 2nd Edition. Sunderland, Sinauer Associates, Inc.\nStatistics: An Introduction Using R\n\nChapter 8 - Analysis of Variance\nChapter 9 - Analysis of Covariance\n\n\n\n\n\nModel Selection\n\nModules\n\nModule 22 - Model Selection in Linear Regression\n\n\n\nTopics\n\nModel simplification and selection\n\nPartial F tests for comparing models\nForward and backward selection\nInformation criteria considerations for comparing models\n\nThe Akaike Information Criterion (AIC) and others\n\n{stats} step()\n{MASS} stepwise()\n{AICcmodavg}\n\n\n\n\nSuggested Readings\n\nThe Book of R\n\nChapter 22 - Linear Model Selection and Diagnostics\n\n\n\n\nOther Useful Readings\n\nPackage descriptions for {AICcmodavg} and {MuMIn}\n\n\n\nRelevant Data Camp Material\n\nCorrelation and Regression in R - Model Fit\n\n\n\n\nLinear and Mixed Effects Modeling\n\nModules\n\nModule 23 - Generalized Linear Models\nModule 24 - Mixed Effects or Multilevel Modeling\n\n\n\nTopics\n\nGeneralized linear models\n\nOther response variables types (e.g., counts, binary responses)\nLogistic regression, multiple logistic regression\nLog-linear modeling\nLikelihood ratio tests\n\nIntroduction to mixed effects modeling\n\nCombining fixed and random factors\n\nAssessing model fit for GLMs and mixed models\n\n\n\nSuggested Readings\n\nR in Action\n\nChapter 13 - Generalized Linear Models\n\nBolker, B.M., Brooks, M.E., Clark, C.J., Geange, S.W., Poulsen, J.R., Stevens, M.H.H., White, & J.-S.S. (2008) Generalized linear mixed models: A practical guide for ecology and evolution. Trends in Ecology and Evolution 24: 127-135.\n\n\n\nOther Useful Readings\n\nStatistics: An Introduction Using R\n\nChapter 12 - Other Response Variables\n\nBolker, B.M. (2008). Chapter 9. Standard statistics revisited. In: Ecological Models and Data in R. Princeton, NJ: Princeton University Press.\nQuinn, G.P. & Keough, M.J. (2002). Chapter 13. Generalized linear models and logistic regression. Experimental Design and Data Analysis for Biologists. Cambridge, UK: Cambridge University Press."
  },
  {
    "objectID": "00-course-schedule.html#part-iii---miscellany",
    "href": "00-course-schedule.html#part-iii---miscellany",
    "title": "5  Course Schedule",
    "section": "Part III - Miscellany",
    "text": "Part III - Miscellany\n\nBuilding Custom R Packages\n\nSuggested Readings\n\nR in Action\n\nChapter 21 - Creating a Package\n\n\n\n\nOther Useful Resources\n\nHadley Wickham’s Definitive Guide to R Packages\nKarl Broman’s R Package Primer\nHilary Parker’s R Package Tutorial\nFong Chun’s Making your First R Package Tutorial\nThomas Westlake’s Writing an R Package from Scratch Tutorial\nBuilding R Packages\n\n\n\n\nBuilding Interactive Web Apps\n\nOther Useful Resources\n\nLearning Shiny Resources from RStudio\nZev Ross’ Shiny Tutorial"
  },
  {
    "objectID": "01-module.html",
    "href": "01-module.html",
    "title": "6  Module 01",
    "section": "",
    "text": "Getting Started with R {#module-01}"
  },
  {
    "objectID": "01-module.html#objectives",
    "href": "01-module.html#objectives",
    "title": "6  Module 01",
    "section": "6.1 Objectives",
    "text": "6.1 Objectives\n\nThe goal of this module is to get everyone’s computers set up with R for the semester and to provide background and an introduction to the R programming language and environment."
  },
  {
    "objectID": "01-module.html#backstory",
    "href": "01-module.html#backstory",
    "title": "6  Module 01",
    "section": "6.2 Backstory",
    "text": "6.2 Backstory\nThe name R is a nod to the statistical programming language S (for “Statistics”) that inspired its creation. S was developed at Bell Laboratories by John Chambers and later sold to a small company that further developed it into S-Plus. R was then developed as an alternative to S by Ross Ihaka and Robert Gentleman in the Department of Statistics at the University of Aukland, New Zealand.\nR is an high-level, interpreted language, like Python or Ruby, where commands are executed directly and sequentially, without previously compiling a program into machine-language instructions. Each statement is translated, on the fly, into a sequence of subroutines that have already been compiled into machine code.\nR is open-source software, meaning that the source code for the program is freely available for anyone to modify, extend, and improve upon. R is also FREE (!) for anyone to use and distribution. The large and active community of users and developers is one of the reasons that R has become very popular in academics, science, engineering, and business - any field that requires data analytics. Developers have also built in the capacity for easily making production-quality graphics, making it a great tool for data visualization. There are thus many good reasons to learn and use R.\nHere are a few of the main ones, in a nutshell:\n\nR is high quality software. It is actively developed by an international community of statisticians and software developers with multiple releases and bug fixes every year.\nR is FREE (as in thought). The source code is openly avaialable under the GNU General Public License, which allows others to easily evaluate the quality of the code, contribute new functionality, and quickly fix bugs.\nR is FREE (as in beer). Whereas licenses for other statistical software such as SAS, SPSS, or Stata may cost thousands of dollars, R is available free of charge.\nR is available for multiple platforms. Installers are available for Windows, MacOS, and other Unix based systems and most package are OS agnostic.\nR is extremely extensible. If there is a procedure you want to run that is not included in one of the standard packages, it is likely available in one of the thousands of extensions packages that have been developed and are also freely available. You can also use R to control or interface with external applications, including other programming languages (like Python, SQL, C++, NetLogo), other analysis tools (like GIS software), and databases (like MySQL, PostgreSQL, SQLite, etc). It is also always possible for you to improve R yourself. You can literally do just about anything in R.\nR has a vibrant, intelligent, and generous user community. LOTS of resources are available online for learning and troubleshooting (see, for example, the section on R at the Stack Overflow website.\n\nR can be run in several ways:\n\nInteractively from a console prompt after launching the program from the command line in either a terminal window or command shell.\nIn batch mode, by sourcing commands from an R script file (which is a simple text file).\nFrom within an R graphical user interface (or GUI) or integrated development envrionment (or IDE), which accommodates both of the above.\n\nWe are going to introduce several of these ways of working with R, but the easiest and most convenient is to use an IDE."
  },
  {
    "objectID": "01-module.html#installing-the-r-software",
    "href": "01-module.html#installing-the-r-software",
    "title": "6  Module 01",
    "section": "6.3 Installing the R Software",
    "text": "6.3 Installing the R Software\n\nDownload and install R from the Compehensive R Archive Network (CRAN) website. Choose the correct version for your operating system.\n\n\n\n\n\n\n\nIf you are using MacOS, you should consider also installing XQuartz, which lets you use the X11 X Windows management software.\n\n\n\n\n\n\n\nOpen the R program from wherever you installed it (e.g., in MacOS, double-click on the R.app application in your Applications folder; on a PC, search for and open the Rgui.exe application, which should be located somewhere inside your C:\\Program Files\\R\\R-[version] folder… you should see the console window and the &gt; prompt. Note that your screen may look slightly different from the screenshots below.\n\nAlso, note that you can also run R in a terminal shell (MacOS or Unix) or from the Windows command shell after starting it with the command r. Depending on whether you have set your PATH variable to detect the R executable file, you may or may not need to first navigate into the directory containing the executable file.\n\nOn MacOS, the default GUI will look as follows:\n\n\n\n\n\n\n\nOn Windows, the default GUI (RGui) looks like this:"
  },
  {
    "objectID": "01-module.html#exploring-the-r-console",
    "href": "01-module.html#exploring-the-r-console",
    "title": "6  Module 01",
    "section": "6.4 Exploring the R Console",
    "text": "6.4 Exploring the R Console\n\nR can be used as an interactive calculator from the console prompt, either in a GUI or in the shell.\n\nStandard mathematical order of operations applies (PEMDAS - parentheses, exponents, multiplication/division, addition/subtraction).\n\nThe assignment operator &lt;- can be used to assign a value, the results of an operation, or specific code to an object (e.g., a variable, a function, a complex data structure).\n\nYou can also use =, but I prefer to use that only to assign values to function arguments (more on this later).\n\nYou can set various settings to customize your interactions with R.\n\nTo change the standard prompt, use the function options() with the prompt argument: options(prompt=\"&lt;prompt text&gt;\"), where you supply, between the quotes, text with what you want the prompt to say.\nTo list the current working directory (the default folder where dialog boxes will open and where files and output will be stored unless otherwise specified), use the function getwd(), which has no arguments.\nTo set the current working directory, use the function setwd(\"&lt;path&gt;\"), where you supply, between the quotes, the path to the desired directory.\n\nOn MacOS, these directory options are also available under the Misc menu.\nOn Windows, you can set the working directory with the Change dir command under the File menu.\nIn RStudio, the working directory can be set under the Session menu.\n\n\nWithin the active workspace, R keeps a log of all executed commands, and you can use the arrow keys to scroll through this history. In RStudio, this list is accessible in the History tab.\nCommands and code can also be written in a text file or script and sent to the console for execution.\n\nIn most GUIs/IDEs, you can choose to create a new script document from the File menu, which opens in a text editor of some kind.\nFrom within the text editor, you can send an individual command to the R interpreter by positioning your cursor somewhere in the line you want to execute and hitting ⌘-RETURN (Mac) or either control-R (for the default GUI that ships with R) or control-ENTER (for the RStudio GUI) (PC).\nTo send a set of commands to the console as a batch, you can highlight the code lines of code you want to execute and then use these same commands.\nYou can include comments in your scripts by prefacing them with #.\nScript files can be saved just like any other type of text file, usually with the “.R” extension by default.\n\nTo view the names of all of the objects in your current workspace, you can use the ls() function. In RStudio, these also all appear in the Environment tab.\nTo clear objects from your workspace, use the rm() function, where an individual object’s name or a list of object names can be included as the argument to rm().\nTo remove all objects from your workspace, you can use rm(list=ls()).\n\nIn this case, you are passing to rm() a list consisting of all the objects in the workspace, provided by the ls() function.\n\n\n\nCHALLENGE:\nFire up R in your mode of choice (by typing “R” at the console prompt in the Terminal in MacOS or from a cmd or other shell prompt in Windows) and then practice interacting with the software via the command line and console window.\n\nTry doing some math in R by using it to evaluate the following expressions:\n\n8 + 5\n10 - 6 / 2\n(10 - 6) / 2\n10 * 5\n15 / 5\n10 ^ 5\n3 * pi (where pi is a built-in constant)\n\n\n\n8 + 5\n\n[1] 13\n\n10 - 6 / 2\n\n[1] 7\n\n(10 - 6) / 2\n\n[1] 2\n\n10 * 5\n\n[1] 50\n\n15 / 5\n\n[1] 3\n\n10 ^ 5\n\n[1] 1e+05\n\n3 * pi\n\n[1] 9.424778\n\n\n\nTry working with assignments:\n\nAssign the number 6 to a variable called x.\nAssign the number 5 to a variable called y.\nAssign x * y to a variable called z.\nAssign x^2 to a variable called x2.\n\n\n\nx &lt;- 6\nx\n\n[1] 6\n\ny &lt;- 5\ny\n\n[1] 5\n\nz &lt;- x * y\nz\n\n[1] 30\n\nx2 &lt;- x ^ 2\nx2\n\n[1] 36\n\n\n\nTry out some of the built-in functions in R:\n\nAssign the number 10 to a variable called x.\nTake the natural log of x using the log() function.\nFind the factorial of x using the factorial() function.\nAssign the number 81 to a variable called y.\nTake the square root of y using the sqrt() function.\nAssign the number -8.349218 to a variable called z.\nUse ?round or help(round) to view the help file for the function round().\nRound z to the 1000ths place.\nUse ?abs() to view the help file for the function abs().\nTake the absolute value of z * y.\n\n\n\nx &lt;- 10\nlog(x)\n\n[1] 2.302585\n\nfactorial(x)\n\n[1] 3628800\n\ny &lt;- 81\nsqrt(y)\n\n[1] 9\n\nz &lt;- -8.349218\nround(z, digits = 3)\n\n[1] -8.349\n\nabs(z * y)\n\n[1] 676.2867\n\n\n\nUse the ls() function to list the variables currently stored in your active session.\n\nHow many do you have?\n\n\n\nls()\n\n[1] \"has_annotations\" \"x\"               \"x2\"              \"y\"              \n[5] \"z\"              \n\n\n\nUse the command rm(list=ls()) to clear all the variables you have defined.\nWhat happens if you type a function name without including the parentheses?\nWhat happens if you type a function with an invalid or missing argument?"
  },
  {
    "objectID": "01-module.html#concept-review",
    "href": "01-module.html#concept-review",
    "title": "6  Module 01",
    "section": "Concept Review",
    "text": "Concept Review\n\nInteracting with R from the console prompt\nVariable assignment: &lt;-\nCalling built-in functions: function(&lt;arguments&gt;)\nAccessing R documentation and help files: ?function or help(function)\nWorkspaces and the working directory: getwd(), setwd()\nListing and removing variables from the environment: ls(), rm()\nAccessing the console history"
  },
  {
    "objectID": "02-module.html",
    "href": "02-module.html",
    "title": "7  Module 02",
    "section": "",
    "text": "8 Getting Started with RStudio"
  },
  {
    "objectID": "02-module.html#objectives",
    "href": "02-module.html#objectives",
    "title": "7  Module 02",
    "section": "8.1 Objectives",
    "text": "8.1 Objectives\n\nThe goal of this module is to familiar yourself with the RStudio Integrated Development Environment (IDE)."
  },
  {
    "objectID": "02-module.html#installing-the-rstudio-software",
    "href": "02-module.html#installing-the-rstudio-software",
    "title": "7  Module 02",
    "section": "8.2 Installing the RStudio Software",
    "text": "8.2 Installing the RStudio Software\nApart from the GUIs included in the MacOS and Windows installations of R, there are several IDEs that connect to the R interpreter and provide lots of convenient functionality. One of the most versatile and easy to use (and my favorite) is RStudio.\n\nDownload and install the RStudio Integrated Development Environment (IDE)\n\n\n\n\n\n\n\nOpen the RStudio program\n\nThe workspace that you see is divided into four separate panes (Source and Console panes on the left, two customizable panes on the right). You can modify the layout and appearance of the RStudio IDE to suit your taste by selecting Preferences from the RStudio menu (MacOS) or by selecting Global Options from the Tools menu (both MacOS and Windows).\n\n\n\n\n\nThe Source pane is where you work with and edit various file types (e.g., scripts), while the Console pane is where you run commands in the R interpreter and see the results of those commands. The other two customizable panes provide easy access to useful tools and overviews of your interactions with R. For example, the Environment tab can be used to view all of the objects in the different environments in your current workspace, the History tab shows the log of all of the commands you have sent to the interpreter, and the Packages tab provides a convenient interface for installing and loading packages (see below).\nWithin RStudio, you can change the working directory by going to the Session menu and selecting Set Working Directory.\n\nCHALLENGE:\nRepeat the basic maths CHALLENGE from Module 01 using the editor and console in RStudio.\n\nNOTE: In both the base GUI that ships with the R application and in RStudio, the console supports code completion. Pressing TAB after starting to type a function or variable name will give you suggestions as to how to complete what you have begun to type. In RStudio, this functionality is present also when you are typing code in the text editor in the Source pane. Also helpful in RStudio are popup windows that accompany code completion that show, for each function, what possible arguments that function can take and their default values."
  },
  {
    "objectID": "02-module.html#using-the-rstudio-cloud-server",
    "href": "02-module.html#using-the-rstudio-cloud-server",
    "title": "7  Module 02",
    "section": "8.3 Using the RStudio Cloud Server",
    "text": "8.3 Using the RStudio Cloud Server\nAn alternative (though likely slower!) way to use R and RStudio is to run them through a browser from RStudio’s cloud computing server. To use this approach, visit the RStudio Cloud website, click the Get Started button, and create or sign up for an account.\n\n\n\n\n\nYou can use a Facebook or GitHub account to sign up (I recommend the latter. See Module 05 for more info on signing up for and using GitHub) or create a new account that is specifically for RStudio Cloud.\n\n\n\n\n\nOnce you are signed up, or if you have already done so, you can use your account to log in. Doing so will bring you to the landing page for your RStudio Cloud account.\n\n\n\n\n\nYour account lets you access a sandboxed environment on RStudio’s servers that contains R, RStudio, any packages you install, your own files, etc., which you are connecting via a web browser. You can effectively use it for development without storing anything on your local machine.\nThere, if you create a New Project, you will set up a new R project within your account space. Your account space can include multiple projects, each with its own set of associated files."
  },
  {
    "objectID": "02-module.html#customizing-the-rstudio-ide",
    "href": "02-module.html#customizing-the-rstudio-ide",
    "title": "7  Module 02",
    "section": "8.4 Customizing the RStudio IDE",
    "text": "8.4 Customizing the RStudio IDE\nIf you open either the Preferences (MacOS) or Global Options (MacOS or PC) dialog box in RStudio you can customize the setup and functionality of your IDE.\nIn the General section, I recommend the settings shown below, particularly about restoring your last workspace into memory upon startup and about asking if you wish to save the contents of your current workspace upon shutdown.\n\n\n\n\n\nFeel free to organize the rest of your setup as you would like. For example, you can change lots of options in the Code, Console, Appearance, and Pane Layout sections to set up the IDE as best suits your personal tastes.\n\n\n\n\n\nFinally, if you have already installed git on your computer, go to the Git/SVN section and make sure that the checkbox “Enable version control interface for RStudio projects” is selected and that the path to your git executable is filled. If you have installed git successfully, this should be filled with something like “/usr/bin/git”. If it is not, do not worry… we can set this later after installing and troubleshooting that program."
  },
  {
    "objectID": "02-module.html#concept-review",
    "href": "02-module.html#concept-review",
    "title": "7  Module 02",
    "section": "Concept Review",
    "text": "Concept Review\n\nInstalling, navigating and customizing the RStudio IDE\nRunning R and RStudio through a browser using RStudio Cloud"
  },
  {
    "objectID": "03-module.html",
    "href": "03-module.html",
    "title": "8  Module 03",
    "section": "",
    "text": "9 Extending the Functionality of R"
  },
  {
    "objectID": "03-module.html#objectives",
    "href": "03-module.html#objectives",
    "title": "8  Module 03",
    "section": "9.1 Objectives",
    "text": "9.1 Objectives\n\nThe goal of this module is to show you how to extend the base functionality of R by installing and loading packages."
  },
  {
    "objectID": "03-module.html#preliminaries",
    "href": "03-module.html#preliminaries",
    "title": "8  Module 03",
    "section": "9.2 Preliminaries",
    "text": "9.2 Preliminaries\n\nInstall this package in R: {easypackages}"
  },
  {
    "objectID": "03-module.html#r-packages",
    "href": "03-module.html#r-packages",
    "title": "8  Module 03",
    "section": "9.3 R Packages",
    "text": "9.3 R Packages\nOne of the fantastic things about R, and one of the reasons it is such a flexible tool for so many types of data analysis, is the ability to extend its functionality in a huge variety of ways with packages. Packages are sets of reusable R functions created by the core development team or by users and are akin to libraries in other programming software, like Python. As of January 2020, there are over 15,300 packages that have been contributed to the most common package repository, hosted on the Comprehensive R Archive Network (CRAN) site.\nFrom the console prompt, packages can be installed into R (using the install.packages() function, with the name of the package in parentheses) and then loaded (using the require() or library() functions), which then gives the user access to the functions contained therein. Both RStudio and the base R GUIs for MacOS and Windows have built-in package managers that allow you to search for and install packages.\nEach package includes a namespace associated with the functions contained therein, and those functions are loaded into their own, separate R environments, distinct from the global environment, where the variables we assigned values to in Module 01 were created. An environment can be thought of as a collection of objects (functions, variables etc.) associated either globally, with the R interpreter (the “R_GlobalEnv”) or with a particular package and its namespace. In RStudio, you can see all of the objects associated with a particular environment in the Environment tab.\nIf a package is loaded that has a function with the same name as one in a previously loaded package or in base R, then the older function will be masked and the newer will be used if called by a user. This is because whenever an object is referenced in a command, the R interpreter searches for that object in various loaded environments in a particular order and operates on the first one it encounters. The global environment is searched first, followed by the environments associated with each loaded package in reverse chronological order of when they are loaded and ending with the base R environment.\n\n\n\n\n\n\n\nFROM: Wickham (2019). Advanced R, Second Edition. Chapman & Hall/CRC.\n\n\n\nHowever, functions from different packages with the same name can be called explicitly by using the :: operator, using the construct package-name::function to access the desired namespace and environment. A particular function can be called in this way even if the package as a whole has not been loaded into R using library() or require(). The search() function can be used to return a vector of environment names in the order they will be searched.\n\nInstalling Packages\n\nNOTE: A list of packages we will be using in this course is available here.\n\n\nUsing the base MacOS GUI\n\nSelect the Packages & Data menu.\nChoose Package Installer.\nSelect a package repository to install from, e.g., CRAN (binaries).\nThe first time you go to install packages, you will be prompted to select a mirror site (i.e., the remote server from where you can download any of the packages hosted in the selected package repository).\nSelect an install location. I usually install packages to the system rather than user level.\nCheck the box “Install dependencies”.\nSelect a package to install.\n\n\n\nUsing the base Windows GUI\n\nSelect the Packages menu.\nChoose Install package(s)….\nBy default, the package repository that you will install from is CRAN (binaries).\nThe first time you go to install packages, you will be prompted to select a mirror site (a.k.a., the remote server from where you can download any of the packages hosted in the selected package repository).\nSelect a package to install.\nBy default, packages are installed at the system level (inside of the library folder within your R installation), and any missing dependenices are also installed by default.\n\n\n\nUsing the R console prompt\n\nUse the function install.packages(\"&lt;package name&gt;\"), where you include, between the quotes, the name of the package you want to install. This command installs the package, by default, to the user level, though this can be changed by providing a path to install to using the lib=\"&lt;path&gt; argument. Other arguments for this function can be set to specify the repository to download from, etc.\n\n\n\nUsing RStudio\n\nSelect the Packages tab and then click the “Install” button.\nA dialog box will open where you can choose where to install the package from (the central CRAN repository is typically the source you will use) and the install location on your computer.\nYou can install packages either to the user level library (in which case, only the user who is logged in when the package is installed will have access to it) or to the system library (which will make the package available for all users).\nType the name of the package you want to install in the text field in the middle of the dialog box (code completion will list available packages that match what you are typing as you type). You can install multiple packages at the same time by separating them with a space or comma.\nMake sure the “Install dependencies” checkbox is selected… this will automatically check whether other packages that are referenced in the package you want to install are already installed and, if not, will install them as well.\n\n\n\n\n\n\n\n\n\nLoading and Attaching Packages\nNote that installing packages simply places them into a standard location on your computer. To actually use the functions they contain in an R session, you need to also load them into your R workspace.\n\nUsing the base MacOS GUI\n\nSelect the Packages & Data menu.\nChoose Package Manager.\nCheck the box next to the package name.\n\n\n\nUsing the base Windows GUI\n\nSelect the Packages menu.\nChoose Load package….\nSelect the package to load.\n\n\n\nUsing RStudio\n\nYou can load a package interactively in RStudio by clicking the checkbox next to the package name in the Packages tab.\n\n\n\n\n\n\n\n\nUsing the console prompt or a script\n\nThe most common way that you will load packages is to do so either interactively at the console prompt or in a script using the command library(&lt;package name&gt;) with the package name, not in quotes, as an argument.\nThe require() function is nearly identical to the library() function except that the former is safer to use inside functions because it will not throw an error if a package is not installed. require() also returns a value of TRUE or FALSE depending on whether the package loaded successfully or not. However, I almost always use the library() function in my scripts. Using library() and require() both load a package’s named components (its “namespace”) and attach those to the global environments search list.\n\n\nNOTE: When loading a package with library() or require(), the package name need not be in quotes, although it works if you were to do that.\n\nBe aware that if a named function of a package conflicts with one in an already loaded/attached package, then by default R will warn of the conflict. In that case, it is good form to use explicit function calls, i.e., use the :: operator to specify first the package and then the function (e.g., dplyr::filter()) you wish to call.\n\n\n\nWorking with Packages\n\nYou can use either of the following to list the set of packages you have installed:\n\nlibrary()\ninstalled.packages()\n\nThe command (.packages()) can be used print out the set packages that have been loaded/attached in your current workspace.\n\n\nNOTE: In the example above, the .packages() function is wrapped in parentheses to immediately print the result of the function.\n\nIn RStudio, you can also see a list of all loaded packages by clicking the down arrow next to “Global Environment” in the Environment tab.\n\n\n\n\n\n\nThe command detach(package:&lt;package name&gt;), where “package name”, not in quotes, is the name of the package you want to unload, will unload a currently loaded package from memory. You can also do this interactively in RStudio by unchecking the box next to the package name in the Packages tab.\nTo update your installed packages to the latest version, you can use the function update.packages(). Using RStudio, you can also select “Update” from the Packages tab to get an interactive dialog box showing you what updates are available from CRAN and letting you install them.\n\n\n\n\n\n\n\nTo remove installed packages from your R installation, you can use the function remove.packages() or click the small “x” to the right of the package name in the RStudio packages tab.\n\n\n\n\n\n\n\nTo process several package at once, you can pass a vector of package names to many of these functions as an argument, e.g., remove.packages(c(\"abc\",\"citr\"))\nFinally, the {easypackages} packages makes installing and loading multiple packages “easy” by introducing two helper functions, packages() and libraries(). Both let you specify a vector of package names to either install (e.g., packages(c(\"tidyverse\", \"magrittr\"))) or load (e.g., libraries(c(\"tidyverse\", \"magrittr\"))). For these functions, package names need to be specified in quotation marks."
  },
  {
    "objectID": "03-module.html#concept-review",
    "href": "03-module.html#concept-review",
    "title": "8  Module 03",
    "section": "Concept Review",
    "text": "Concept Review\n\nWorking with packages: install_packages(), library(), require(), detach(), update.packages(), remove.packages(), and {easypackages}\nEnvironments and namespaces: ::, search()"
  },
  {
    "objectID": "04-module.html",
    "href": "04-module.html",
    "title": "9  Module 04",
    "section": "",
    "text": "10 Fundamentals of the R Language"
  },
  {
    "objectID": "04-module.html#objectives",
    "href": "04-module.html#objectives",
    "title": "9  Module 04",
    "section": "10.1 Objectives",
    "text": "10.1 Objectives\n\nThe goal of this module is review important conceptual aspects of the R language as well as practices for updating R components of interest."
  },
  {
    "objectID": "04-module.html#r-objects",
    "href": "04-module.html#r-objects",
    "title": "9  Module 04",
    "section": "10.2 R Objects",
    "text": "10.2 R Objects\nAlmost everything in R can be thought of as an object, including variables, functions, complex data structures, and environments.\n\nClasses, Modes, and Types\nObjects in R fall into different classes. There are a few basic (or atomic) classes that pertain to variables: numeric (real numbers), integer (integer numbers), character (for text), logical (Boolean values, i.e., TRUE or FALSE, represented as 1 and 0, respectively), complex (for imaginary numbers), and factor (for defined levels of categorical variables… we will talk more about factors later on). There are other classes beyond this set of atomic classes relevant to variables. For example, both built-in and user defined functions have the class function. You can ask R to return the class of any object with the class() function, and R objects can have more than one class. You can think of class as being a property of an object that determines how generic functions operate with it.\nExamples:\n\n# Class of a variable\nx &lt;- 4\nclass(x)\n\n[1] \"numeric\"\n\nx &lt;- \"hi there\"\nclass(x)\n\n[1] \"character\"\n\n# Class of a function\nclass(mean)\n\n[1] \"function\"\n\n\nIn R, environments are objects as well.\n\nWhat is the class of the global environment, where we have been binding values to variable names? To check, use class(globalenv()).\n\n\n\nclass(globalenv())\n\n[1] \"environment\"\n\n\n\nObjects in R also each have a mode and a base type. These are often closely aligned with and similar to the class of an object, but the three terms refer to slightly different things. If an object has no specific class assigned to it, its class is typically the same as its mode. Mode is a mutually exclusive classification of objects, according to their basic structure. When we coerce an object to another basic structure, we are changing its mode but not necessarily the class.\n\n# Mode of a variable\nx &lt;- 4\nmode(x)\n\n[1] \"numeric\"\n\nx &lt;- \"hi there\"\nmode(x)\n\n[1] \"character\"\n\n# Mode of a function\nmode(mean)\n\n[1] \"function\"\n\n\n\n# Type of a variable\nx &lt;- 4\ntypeof(x)\n\n[1] \"double\"\n\nx &lt;- \"hi there\"\ntypeof(x)\n\n[1] \"character\"\n\n# Type of a function\ntypeof(mean)\n\n[1] \"closure\"\n\n\n\nNOTE: For more details on the difference between the class, mode, and base type of an object, check out the book Advanced R, Second Edition by Hadley Wickham (RStudio).\n\n\n\nVectors\nR also supports a variety of data structures for variable objects, the most fundamental of which is the vector. Vectors are variables consisting of one or more values of the same type, e.g., student’s grades on an exam. The class of a vector has to be one of the atomic classes described above. A scalar variable, such as a constant, is simply a vector with only one value.\n\nThere are lots of ways to create vectors… one of the most common is to use the c() or “combine” command:\n\n\nx &lt;- c(15, 16, 12, 3, 21, 45, 23)\nx\n\n[1] 15 16 12  3 21 45 23\n\ny &lt;- c(\"once\", \"upon\", \"a\", \"time\")\ny\n\n[1] \"once\" \"upon\" \"a\"    \"time\"\n\nz &lt;- \"once upon a time\"\nz\n\n[1] \"once upon a time\"\n\n\n\nWhat is the class of the vector x? Of z? Use the class() function to check.\n\n\n\nclass(x)\n\n[1] \"numeric\"\n\nclass(z)\n\n[1] \"character\"\n\n\n\n\nWhat happens if you try the following assignment: x &lt;- c(\"2\", 2, \"zombies\")? What is the class of vector x now?\n\n\n\nx &lt;- c(\"2\", 2, \"zombies\")\nclass(x)\n\n[1] \"character\"\n\n\n\nThis last case is an example of coercion, which happens automatically and often behind the scenes in R. When you attempt to combine different types of elements in the same vector, they are coerced to all be of the same type - the most restrictive type that can accommodate all of the elements. This takes place in a fixed order: logical → integer → double → character. For example, combining a character and an integer yields a character; combining a logical and a double yields a double.\nYou can also deliberately coerce a vector to be represented as a different base type by using an as.*() function, like as.logical(), as.integer(), as.double(), or as.character().\n\nx &lt;- c(3, 4, 5, 6, 7)\nx\n\n[1] 3 4 5 6 7\n\ny &lt;- as.character(x)\ny\n\n[1] \"3\" \"4\" \"5\" \"6\" \"7\"\n\n\nAnother way to create vectors is to use the sequence operator, :, which creates a sequence of values from spanning from the left side of the operator to the right, in increments of 1:\n\nx &lt;- 1:10\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nx &lt;- 10:1\nx\n\n [1] 10  9  8  7  6  5  4  3  2  1\n\nx &lt;- 1.3:10.5\nx\n\n [1]  1.3  2.3  3.3  4.3  5.3  6.3  7.3  8.3  9.3 10.3\n\n\n\nNOTE: Wrapping an assignment in parentheses, as in the code block below, allows simultaneous assignment and printing to the console!\n\n\n(x &lt;- 40:45)\n\n[1] 40 41 42 43 44 45\n\n\nWe can also create more complex sequences using the seq() function, which takes several arguments:\n\nx &lt;- seq(from = 1, to = 10, by = 2)\n# skips every other value\nx\n\n[1] 1 3 5 7 9\n\nx &lt;- seq(from = 1, to = 10, length.out = 3)\n# creates 3 evenly spaced values\nx\n\n[1]  1.0  5.5 10.0\n\n\n\n\nAttributes and Structure\nMany objects in R also have attributes associated with them, which we can think of as metadata, or data describing the object. Some attributes are intrinsic to an object. For example, a useful attribute to know about a vector object is the number of elements in it, which can be queried using the length() command.\n\nlength(x)\n\n[1] 3\n\n\nWe can also get or assign arbitrary attributes to an object using the function attr(), which takes two arguments: the object whose attributes are being assigned and the name of the attribute.\n\n# we can assign arbitary attributes to the vector x\nattr(x, \"date collected\") &lt;- \"2019-01-22\"\nattr(x, \"collected by\") &lt;- \"Anthony Di Fiore\"\nattributes(x) # returns a list of attributes of x\n\n$`date collected`\n[1] \"2019-01-22\"\n\n$`collected by`\n[1] \"Anthony Di Fiore\"\n\nclass(attributes(x)) # the class of a list is \"list\"\n\n[1] \"list\"\n\n# a \"list\" is another R data structure\nattr(x, \"date collected\") # returns the value of the attribute\n\n[1] \"2019-01-22\"\n\n\nFinally, every object in R also has a structure, which can be queried using the str() command.\n\nstr(x) # structure of the variable x\n\n num [1:3] 1 5.5 10\n - attr(*, \"date collected\")= chr \"2019-01-22\"\n - attr(*, \"collected by\")= chr \"Anthony Di Fiore\"\n\nstr(mean) # struture of the function mean\n\nfunction (x, ...)  \n\nstr(globalenv()) # structure of the global environment\n\n&lt;environment: R_GlobalEnv&gt; \n\nstr(attributes(x)) # attribute names are stored as a list\n\nList of 2\n $ date collected: chr \"2019-01-22\"\n $ collected by  : chr \"Anthony Di Fiore\"\n\n\n\nNOTE: The glimpse() function from the {dplyr} package also yields information on the structure of an object, sometimes in a more easily-readable format than str().\n\n\n\nCHALLENGE:\nTry some vector math using the console in RStudio:\n\nAssign a sequence of numbers from 15 to 28 to a vector, x.\n\n\nNOTE: There are at least two different ways to do this!\n\n\nAssign a sequence of numbers from 1 to 4 to a vector, y.\nAdd x and y. What happens?\n\n\n\nx &lt;- 15:28 # or x &lt;- c(15, 16, 17...)\ny &lt;- 1:4\n(x + y)\n\nWarning in x + y: longer object length is not a multiple of shorter object\nlength\n\n\n [1] 16 18 20 22 20 22 24 26 24 26 28 30 28 30\n\n\n\n\nUse the up arrow to recall the last command from history and modify the command to store the result of the addition to a variable, z. What kind of object is z? Examine it using the class() function. What is the length of z?\n\nNow, think carefully about this output… there are two important things going on.\nFirst, R has used vectorized addition in creating the new variable. The first element of x was added to the first element of y, the second element of x was added to the second element of y, etc.\nSecond, in performing this new variable assignment, the shorter vector has been recycled. Thus, once we get to the fifth element in x we start over with the first element in y.\nThis means we can very easily do things like adding a constant to all of the elements in a vector or multiplying all the elements by a constant.\n\ny &lt;- 2\n# we can use parentheses for simultaneous assignment and printing\n(x + y)\n\n [1] 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n\n(x * y)\n\n [1] 30 32 34 36 38 40 42 44 46 48 50 52 54 56\n\n\nMany function operations in R are also vectorized, meaning that if argument of a function is a vector, but the function acts on a single value, then the function will be applied to each value in the vector and will return a vector of the same length where the function has been applied to each element.\n\nx &lt;- 1:20\n(logx &lt;- log(x))\n\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851 2.3978953 2.4849066 2.5649494 2.6390573\n[15] 2.7080502 2.7725887 2.8332133 2.8903718 2.9444390 2.9957323\n\n(x2 &lt;- x^2)\n\n [1]   1   4   9  16  25  36  49  64  81 100 121 144 169 196 225 256 289 324 361\n[20] 400\n\n(y &lt;- 4 * x + 3)\n\n [1]  7 11 15 19 23 27 31 35 39 43 47 51 55 59 63 67 71 75 79 83\n\n\nWe can use the {base} R function plot() to do some quick visualizations.\n\n# `plot()` takes values of x and y values as first two arguments\n# the `type=\"o\"` argument superimposes points and lines\nplot(x, logx, type = \"o\")\n\n\n\nplot(x, x2, type = \"o\")\n\n\n\nplot(x, y, type = \"o\")\n\n\n\n\n\n\nCHALLENGE:\n\nUse the rnorm() function to create a vector, s that contains a set of random numbers drawn from a normal distribution with mean 80 and standard deviation 10. Try doing this with n = 10, n = 100, n = 1000, n = 10000.\n\n\nHINT: Use ?rnorm or help(rnorm) to access the help documentation on how to use the rnorm() function.\n\nThen, use the hist() function to plot a histogram showing the distribution of these numbers.\n\n\ns &lt;- rnorm(n = 10000, mean = 80, sd = 10)\nhist(s) # hist() plots a simple histogram of values for s\n\n\n\n\n\n\nUse the mean() and sd() functions to calculate the mean and standard deviation of s. Here, the whole vector is used as the argument of the function, i.e., the function applies to a set of values not a single value. The function thus returns a vector of length 1.\n\n\n\nmean(s)\n\n[1] 80.15378\n\nsd(s)\n\n[1] 9.911311"
  },
  {
    "objectID": "04-module.html#scripts-and-functions",
    "href": "04-module.html#scripts-and-functions",
    "title": "9  Module 04",
    "section": "10.3 Scripts and Functions",
    "text": "10.3 Scripts and Functions\nAs mentioned previously, scripts in R are simply text files that store an order list of commands, which can be used to link together sets of operations to perform complete analyses and show results.\nFor example, you could enter the lines below into a text editor and then save the script in a file named “my_script.R” in a folder called src/ inside your working directory.\n\nx &lt;- 1:10\ns &lt;- sum(x)\nl &lt;- length(x)\nm &lt;- s / l\nprint(m)\n\n[1] 5.5\n\n\nIf you save a script, you can then use the source() function (with the path to the script file of interest as an argument) at the console prompt (or in another script) to read and execute the entire contents of the script file. In RStudio you may also go to Code &gt; Source to run an entire script, or you can run select lines from within a script by opening the script text file, highlighting the lines of interest, and sending those lines to the console using the “Run” button or the appropriate keyboard shortcut, ⌘-RETURN (Mac) or control-R (PC).\n\nsource(\"src/my_script.R\")\n\n[1] 5.5\n\n# assuming the file was saved with the \".R\" extension...\n\nIn an R script, you might use several lines of code to accomplish a single analysis, but if you want to be able to flexibly perform that analysis with different input, it is good practice to organize portions of your code within a script into user-defined functions. A function is a bit of code that performs a specific task. It may take arguments or not, and it may return nothing, a single value, or any R object (e.g., a vector or a list, which is another data structure will discuss later on). If care is taken to write functions that work under a wide range of circumstances, then they can be reused in many different places. Novel functions are the basis of the thousands of user-designed packages that are what make R so extensible and powerful.\n\nCHALLENGE:\nTry writing a function!\n\nOpen a new blank document in RStudio\n\nFile &gt; New &gt; R Script\n\nType in the code below to create the say_hi() function, which adds a name to a greeting:\n\n\n# this function takes one argument, x...\n# appends the value of that argument to a greeting...\n# and then prints the whole greeting\nsay_hi &lt;- function(x) {\n  hi &lt;- paste(\"Greetings, \", x, \"!\", sep = \"\")\n  # the `paste()` command allows string concatenation\n  # alternatively, we could use `paste0()` and omit the\n  # `sep=` argument\n  return(hi)\n}\n\nIn general, the format for a function is as follows:\nfunction_name &lt;- function(&lt;arguments&gt;) {&lt;function code&gt;}\nYou can send this function to the R console by highlighting it in the editor and hitting ⌘-RETURN (Mac) or control-ENTER (PC). This loads the function as an object into the working environment.\n\n\n\n\n\n\nNow we can create some test data and call the function. What are the results?\n\n\nname1 &lt;- \"Rick Grimes\"\nname2 &lt;- \"Ruth Bader Ginsburg\"\nsay_hi(name1)\n\n[1] \"Greetings, Rick Grimes!\"\n\nsay_hi(name2)\n\n[1] \"Greetings, Ruth Bader Ginsburg!\"\n\n\nYou can also save the function in a file, e.g., in the src/ folder inside your working directory, and then source(\"&lt;path&gt;\") it in code. Save your function script as “say_hi.R” and then run the following:\n\nsource(\"src/say_hi.R\")\nname3 &lt;- \"Charles Darwin\"\nsay_hi(name3)\n\n[1] \"Greetings, Charles Darwin!\""
  },
  {
    "objectID": "04-module.html#quitting-r-and-saving-your-work",
    "href": "04-module.html#quitting-r-and-saving-your-work",
    "title": "9  Module 04",
    "section": "10.4 Quitting R and Saving your Work",
    "text": "10.4 Quitting R and Saving your Work\nWorking in RStudio, you can save script files (which, again, are just plain text files) using standard dialog boxes.\nWhen you go to quit R (by using the q() function or by trying to close RStudio), you may be asked whether you want to…\n“Save workspace image to &lt;path&gt;/.Rdata?”, where &lt;path&gt; is the path to your working directory.\nSaying “Save” will store all of the contents of your workspace in a single hidden file, named “.Rdata”. The leading period (“.”) makes this invisible to most operating systems, unless you deliberately make it possible to see hidden files.\n\nNOTE: I tend to NOT save my workspace images. You can change the default behavior for this by editing RStudio’s preferences and choosing “Always”, “Never”, or “Ask”.\n\n\n\n\n\n\nThe next time you start R, the workspace from “.RData” will be loaded again automatically, provided you have not changed your working directory and you have not unchecked “Restore .RData into workspace at startup” in preferences.\nA second hidden file, “.Rhistory”, will also be stored in the same directory, which will contain a log of all commands you sent to the console, provided you have not unchecked “Always save history”."
  },
  {
    "objectID": "04-module.html#updating-r",
    "href": "04-module.html#updating-r",
    "title": "9  Module 04",
    "section": "10.5 Updating R",
    "text": "10.5 Updating R\nR has been under continuous and active development since its inception in the late 1990s, and several updates are made available each year. These update help to fix bugs, improve speed and computational efficiency, and add new functionality to the software. The following information on how to update R is based on this post from Stack Overflow\n\nStep 1: Get the latest version of R {-}\n\nGo to the R Project website.\nClick on CRAN in the sidebar on the left.\nChoose the CRAN Mirror site that you like.\nClick on Download R for… (choose your operating system).\nFollow the installation procedures for your system.\nRestart RStudio.\n\nStep 2: Relocate your packages {-}\n\nTo ensure that your packages work with your shiny new version of R, you need to:\n\nMove the packages from your old R installation into the new one.\nOn MacOS, this typically means moving all library folders from “/Library/Frameworks/R.framework/Versions/3.5/Resources/library” to “/Library/Frameworks/R.framework/Versions/4.1/Resources/library”\n\n\n\n\nNOTE: You should replace “3.5” and “4.1” with whatever versions you are upgrading from and to, respectively.\n\n\nOn Windows, this typically means moving all library folders from “C:\\Program Files\\R\\R-3.5\\library” to “C:\\Program Files\\R\\R-4.1\\library” (if your packages are installed at the system level) or from “C:\\Users\\&lt;user name&gt;\\R\\win-library\\3.5\\” to “C:\\Users\\&lt;user name&gt;\\R\\win-library\\4.1\\” (if your packages are installed at the user level)\n\n\nNOTE: You only need to copy whatever packages are not already in the destination directory, i.e., you do not need to overwrite your new {base} package, etc., with your old one.\n\n\nIf those paths do not work for you, try using installed.packages() to find the proper path names. These may vary on your system, depending on where you installed R\nNow you can update your packages by typing update.packages() in your RStudio console, and answering “y” to all of the prompts.\nFinally, to reassure yourself that you have done everything correctly, type these two commands in the RStudio console to see what you’ve got in terms of what version of R you are running, the number of packages you have installed, and what packages you have loaded:\n\n\nversion\npackageStatus()\n(.packages())"
  },
  {
    "objectID": "04-module.html#concept-review",
    "href": "04-module.html#concept-review",
    "title": "9  Module 04",
    "section": "Concept Review",
    "text": "Concept Review\n\nCharacteristics of R objects: class(), mode(), typeof(), str(), attributes(), dplyr::glimpse()\nUsing scripts: source()\n“.RData” and “.RHistory” files\nUpdating R and packages"
  },
  {
    "objectID": "exercise-01.html",
    "href": "exercise-01.html",
    "title": "10  Exercise 01",
    "section": "",
    "text": "Send Emails Programmatically"
  },
  {
    "objectID": "exercise-01.html#learning-objectives",
    "href": "exercise-01.html#learning-objectives",
    "title": "10  Exercise 01",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nInstalling and loading/attaching packages\nIntroducing functions and arguments\nIntroducing the pipe (%&gt;% or |&gt;) operator"
  },
  {
    "objectID": "exercise-01.html#version-1-using-the-emayaili-package",
    "href": "exercise-01.html#version-1-using-the-emayaili-package",
    "title": "10  Exercise 01",
    "section": "Version 1: Using the {emayaili} package",
    "text": "Version 1: Using the {emayaili} package\nThe {emayili} package makes sending simple text emails very easy.\n\nStep 1\n\nInstall the {emayili} and {tidyverse} packages.\n\n\nNote that {tidyverse} is only needed if we are going to use the %&gt;% operator (see below).\n\nWe can do this at the R console prompt…\n\ninstall.packages(\"emayili\")\ninstall.packages(\"tidyverse\")\n\n# or to install both packages together...\n\ninstall.packages(c(\"emayili\", \"tidyverse\"))\n\nWe can also do this by using the package manager in RStudio.\n\n\n\n\n\n\n\nStep 2\n\nLoad and attach these packages to the search path so you can call functions they contain.\n\n\nlibrary(emayili)\nlibrary(tidyverse)\n\n\nNOTE: We can also use require() in lieu of library().\n\n\n\nStep 3\n\nCreate a new email “message” with the envelope() function from the {emayili} package.\n\nThis function takes several intuitive arguments (from, to, subject, and text) that we can assign values to directly within the function using the = operator.\n\nmessage_gmail &lt;- envelope(\n  from = \"anthony.difiore@utexas.edu\",\n  # this should typically be the email address you are sending the from, although some SMTP transactions will accept alternatives, such as just a name\n  to = \"anthony.difiore@gmail.com\",\n  # NOTE: you can also use a vector of email addresses for the `to` argument to send a message to more than one recipient\n  subject = \"Sending a message using {emayili}\",\n  text = \"Hello! This is a plain text message sent from a Gmail account.\")\n\n\nNOTE: R essentially ignores all the whitespace (spaces and tab characters) and also allows you to have code continue from one line to the next. It is even pretty forgiving about where you put carriage returns, although it is good form to place them following a “,” or before/after a parenthesis or brace.\n\nUsing {tidyverse} syntax, we can set up the same email as follows using the “pipe” operator (%&gt;%):\n\nmessage_gmail &lt;- envelope() %&gt;%\n  from(\"anthony.difiore@utexas.edu\") %&gt;%\n  to(\"anthony.difiore@gmail.com\") %&gt;%\n  subject(\"Sending a message using {emayili}\") %&gt;%\n  text(\"Hello! This is a plain text message sent from a Gmail account.\")\n\nAs of R version 4.x, we can alternatively use R’s “native” pipe operator, `|&gt;:\n\nmessage_gmail &lt;- envelope() |&gt;\n  from(\"anthony.difiore@utexas.edu\") |&gt;\n  to(\"anthony.difiore@gmail.com\") |&gt;\n  subject(\"Sending a message using {emayili}\") |&gt;\n  text(\"Hello! This is a plain text message sent from a Gmail account.\")\n\nThe difference here is that we are first creating an empty “message” object and then “piping” that object using %&gt;% or |&gt; into different helper functions (from(), to(), etc.) to create the details of the message.\n\n\nStep 4\n\nCreate an SMTP (or “Simple Mail Transfer Protocol”) “server” object that includes details about how to send a message, i.e., by specifying the email service’s outgoing server host name, a communications port number to use, and user and password information for authenticating use of the server. SMTP transmission can often use any of several standard port numbers (25, 465, 587, and 2525), but 587 and 465 are the most commonly used and support TLS encryption. To use Google’s outgoing email server, set the host to “smtp.gmail.com” and the port to either 465 or 587.\n\n\nsmtp_gmail &lt;- server(\n  host = \"smtp.gmail.com\",\n  port = 465,\n  max_times = 1,\n  # this sets the number of attempts the function will make to send the message\n  username = \"anthony.difiore@utexas.edu\",\n  # username for service you are sending from\n  password = pwd_gmail)\n  # use the variable you set up to hold your \"app password\" for your Google account or enter your password here, in quotation marks it, in lieu of the variable `gmail_pwd`\n\n\nNOTE: In the example above, I am sending the message to one Gmail address (anthony.difiore@gmail.com) from a different Gmail account (anthony.difiore@utexas.edu) to access the Gmail server!\n\nTo use Microsoft’s outgoing email server for Outlook email accounts, the host should be set to “smtp.office365.com”, the port should be set to 587, and the message must come from the email address you are sending from that you are using to authenticate your account.\n\nmessage_outlook365 &lt;- envelope() |&gt;\n  from(\"anthony.difiore@outlook.com\") |&gt;\n  to(\"anthony.difiore@gmail.com\") |&gt;\n  subject(\"Sending a message using {emayili}\") |&gt;\n  text(\"Hello! This is a plain text message sent from an Outlook account.\")\n\nsmtp_outlook365 &lt;- server(\n  host = \"smtp.office365.com\",\n  port = 587,\n  max_times = 1,\n  username = \"anthony.difiore@outlook.com\",\n  password = pwd_outlook)\n  # either use a variable, e.g., `outlook_pwd` for your password or add your password between quotation marks here\n\n\n\nStep 5\n\nSend your message by passing it as an argument to the server object. Then, CHECK YOUR EMAIL to confirm that you receive the message.\n\n\n# send using Google's servers...\nsmtp_gmail(message_gmail, verbose = TRUE)\n\n# send using Microsoft's servers...\nsmtp_outlook365(message_outlook365, verbose = TRUE)\n\n# NOTE: setting `verbose = FALSE` (or omitting the argument) will suppress output to the console\n\n\n\nNext Steps?\nUse the RStudio Help tab to browse the documentation associated with the {emayali} package to see how you can customize your message, e.g., by adding cc or bcc arguments, by using a different “reply to” address, by adding attachments, or by encrypting your message."
  },
  {
    "objectID": "exercise-01.html#version-2-using-the-blastula-package",
    "href": "exercise-01.html#version-2-using-the-blastula-package",
    "title": "10  Exercise 01",
    "section": "Version 2: Using the {blastula} package",
    "text": "Version 2: Using the {blastula} package\nThe {blastula} package allows us to create and send more complex HTML and markdown-based formatted emails.\nSimilar to {emayili}, {blastula} provides two main functions: [1] compose_email() for constructing various parts of a message and [2] smtp_send() for specifying email server settings and passing the message to the server to send. However, {blastula} also adds in some helper functions that allow you to store authentication information in either a separate “credentials” text file that is referenced when you run the function to send a message or in your computer’s keychain. {blastula} also stores some default information on commonly-used email providers and services (e.g., on Google’s Gmail and Microsoft’s Office365 and Outlook), which may make configuring the server setup easier than using {emayili}.\n\nStep 1\n\nInstall the {blastula} package.\n\n\ninstall.packages(\"blastula\")\n\n\n\nStep 2\n\nLoad the {blastula} package.\n\n\nlibrary(blastula)\n\n\n\nStep 3\n\nCreate a new email “message” with the compose_email() function.\n\nThis function takes several intuitive arguments that we can assign values to directly within the function.\n\n# Compose the message\nmessage &lt;- compose_email(\n  body = \"Hello! This is a simple HTML message.\"\n  )\n\n# Preview the message\n# This will open the HTML message in a browser window or in the RStudio Viewer tab\nmessage\n\nWe can add some formatting to our email by using the md() function and markdown syntax. Here, we pipe (%&gt;% or \\&gt; the body argument to the md() function to convert it to markdown.\n\n# Compose the message\nmessage &lt;- compose_email(\n  body = \"# Hello!\\nThis is a simple **HTML** message with some *markdown* syntax.\" %&gt;% md()\n)\n\n# Preview the message\nmessage\n\nWe can also spice up our email with an image from a local file. Here, I use an image stored in a folder called “img” inside the my current working directory.\n\n# Create text as html\ntext &lt;- \"# Hello!\\nThis is a simple **HTML** message with some *markdown* syntax... and a cool picture!\"\n\n# Create image as html\nimage &lt;- add_image(\n  file = \"./img/batnet.jpg\",\n  width = 300, align = \"center\"\n)\n\n# Compose the message\nmessage &lt;- compose_email(\n  body = c(text, image) %&gt;% md()\n)\n\n# Preview the message\nmessage\n\n\n\nStep 4\n\nCreate a credentials file.\n\nThe following will create a text file (in JSON format) in the current working directory that contains default information for your outgoing mail server, e.g., Google’s Gmail server (host = \"smtp.gmail.com\") or Microsoft’s Office365 server (host = \"smtp.office365.com\"), along with your email address and your password. When you run the following lines of code, you will be asked to enter a password, which will be stored in the credentials file. For a Gmail account, you can use the app password you created above.\n\n# Credentials file for a Gmail account\ncreate_smtp_creds_file(\n  file = \"my_gmail_creds\",\n  user = \"anthony.difiore@utexas.edu\",\n  provider = \"gmail\"\n)\n# show the credentials file\ncreds_file(\"my_gmail_creds\")\n\n# office365 credentials file\ncreate_smtp_creds_file(\n  file = \"my_office365_creds\",\n  user = \"anthony.difiore@austin.utexas.edu\",\n  provider = \"office365\"\n)\n# show the credentials file\ncreds_file(\"my_office365_creds\")\n\n\nNOTE: If you omit the provider= argument, you should then pass host=, port=, and use_ssl= arguments yourself to the create_smtp_creds_file() function.\n\n\n\nStep 5\n\nSend the message via STMP using a credentials file.\n\n\nsmtp_send(email = message,\n  from = \"Anthony Di Fiore\",\n  to = \"anthony.difiore@gmail.com\",\n  subject = \"Sending a message using {blastula} and a credentials file...\",\n  credentials = creds_file(file = \"my_gmail_creds\"),\n  verbose = TRUE\n  # NOTE: As above, setting verbose = FALSE (or omitting the argument) will suppress output to the console\n)\n\n# or, using the %&gt;% operator and a different server and credentials file...\n\nmessage %&gt;% smtp_send(\n    from = \"Anthony Di Fiore\",\n    to = \"anthony.difiore@austin.utexas.edu\",\n    subject = \"Sending a message using {blastula} and a credentials file...\",\n    credentials = creds_file(file = \"my_office365_creds\")\n)\n\n\n\nStep 6\n\nWe can also send the message by specifying our credentials manually within the smtp_send() function.\n\nThe following will prompt us for our password to send the message:\n\nmessage %&gt;% smtp_send(\n    from = \"Anthony Di Fiore\",\n    to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {blastula} and entering credentials manually...\",\n    credentials = creds(\n      user = \"anthony.difiore@utexas.edu\",\n      provider = \"gmail\"\n    )\n  )\n\nmessage %&gt;% smtp_send(\n    from = \"Anthony Di Fiore\",\n    to = \"anthony.difiore@austin.utexas.edu\",\n    subject = \"Sending a message using {blastula} and entering credentials manually...\",\n    credentials = creds(\n      user = \"anthony.difiore@austin.utexas.edu\",\n      provider = \"office365\",\n      use_ssl = TRUE\n    )\n  )\n\n\n\nNext Steps?\nAgain, use the RStudio Help tab to browse the documentation associated with the {blastula} package to see how you can customize your message, e.g., with attachments.\n\n\nEven More Next Steps?\nFinally, it is a bit more complicated, but note that we can also use the {keyring} package along with {blastula} to set up a credentials “key” in our computer’s keychain and refer to that to specify our credentials for sending a message. When you create the keys, you will be asked to provide your password.\n\ninstall.packages(\"keyring\")\n\n\nlibrary(keyring)\n\n\n# Create Gmail key\ncreate_smtp_creds_key(\n  id = \"my_gmail_key\", # an identifier for the key\n  user = \"anthony.difiore@utexas.edu\",\n  provider = \"gmail\",\n  overwrite = TRUE # this argument is only needed if you have an existing key\n)\ncreds_key(\"my_gmail_key\") # show the key info\n\n# Create office365 key\ncreate_smtp_creds_key(\n  id = \"my_office365_key\", # an identifier for the key\n  user = \"anthony.difiore@austin.utexas.edu\",\n  provider = \"office365\",\n  overwrite = TRUE\n)\ncreds_key(\"my_office365_key\") # show the key info\n\n\n# View all keys\nview_credential_keys()\n\n\n# Send a message with credentials from a keychain\nmessage %&gt;%\n  smtp_send(\n    from = \"Anthony Di Fiore\",\n    to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {blastula} and credentials from a keychain...\",\n    credentials = creds_key(id = \"my_gmail_key\")\n  )\n\nmessage %&gt;%\n  smtp_send(\n    from = \"Anthony Di Fiore\",\n    to = \"anthony.difiore@austin.utexas.edu\",\n    subject = \"Sending a message using {blastula} and a credentials key...\",\n    credentials = creds_key(id = \"my_office365_key\"), verbose = TRUE\n  )"
  },
  {
    "objectID": "packages.html#by-module",
    "href": "packages.html#by-module",
    "title": "List of Packages Used",
    "section": "By Module",
    "text": "By Module\n\nModule 03\n\n{easypackages}: Sherman (2016)\n\n\n\nModule 05\n\n{usethis}: Wickham and Bryan (2020)\n\n\n\nModule 07\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n\n{ggplot2}: Wickham, Chang, et al. (2020), Wickham (2016)\n{tibble}: Müller and Wickham (2020)\n{tidyr}: Wickham and Henry (2020)\n{readr}: Wickham, Hester, and Francois (2018)\n{purrr}: Henry and Wickham (2020)\n{dplyr}: Wickham, François, Henry, and Müller (2020)\n{stringr}: Wickham (2019a)\n{forcats}: Wickham (2020))\n\n{data.table}: Dowle and Srinivasan (2019)\n\n\n\nModule 08\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{readxl}: Wickham and Bryan (2019)\n{XLConnect}: Mirai Solutions GmbH (2020)\n{gdata}: Warnes et al. (2017)\n{xlsx}: Dragulescu and Arendt (2020)\n{curl}: Ooms (2019)\n{rdrop2}: Ram and Yochum (2017)\n{repmis}: Gandrud (2016)\n{googlesheets4}: Bryan (2020)\n{googledrive}: D’Agostino McGowan and Bryan (2019)\n\n\n\nModule 09\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{magrittr}: Bache and Wickham (2014)\n{tidylog}: Elbers (2020)\n\n\n\nModule 10\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{curl}: Ooms (2019)\n{skimr}: Waring et al. (2020)\n{summarytools}: Comtois (2020)\n{dataMaid}: Petersen and Ekstrøm (2019a), Petersen and Ekstrøm (2019b)\n{psych}: Revelle (2020)\n{pastecs}: Grosjean and Ibanez (2018)\n{Hmisc}: Harrell (2020)\n{ggExtra}: Attali and Baker (2019)\n{car}: Fox, Weisberg, and Price (2020), Fox and Weisberg (2019)\n{GGally}: Schloerke et al. (2020)\n{corrplot}: Wei and Simko (2017a), Wei and Simko (2017b)\n{patchwork}: Pedersen (2019)\n{cowplot}: Wilke (2019)\n{gridExtra}: Auguie (2017)\n\n\n\nModule 11\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{sjmisc}: Lüdecke (2020), Lüdecke (2018)\n\n\n\nModule 12\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim, Kaplan, and Horton (2020), Pruim, Kaplan, and Horton (2017)\n{radiant}: Nijs (2020)\n{sciplot}: Morales, with code developed by the R Development Core Team, and with general advice from the R-help listserv community and especially Duncan Murdoch. (2020)\n\n\n\nModule 13\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{cowplot}: Wilke (2019)\n{manipulate}: Allaire (2014)\n\n\n\nModule 14\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{manipulate}: Allaire (2014)\n{boot}: Canty and Ripley (2020), Davison and Hinkley (1997)\n\n\n\nModule 15\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n\n\n\nModule 16\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{coin}: Hothorn, Winell, Hornik, van de Wiel, and Zeileis (2019), Hothorn, Hornik, van de Wiel, and Zeileis (2006), Hothorn, Hornik, van de Wiel, and Zeileis (2008)\n{jmuOutlier}: Garren (2019)\n{infer}: Bray, Ismay, Chasnovski, Baumer, and Cetinkaya-Rundel (2019)\n\n\n\nModule 17\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{manipulate}: Allaire (2014)\n\n\n\nModule 18\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{manipulate}: Allaire (2014)\n{patchwork}: Pedersen (2019)\n{infer}: Bray et al. (2019)\n{broom}: Robinson and Hayes (2020)\n{lmodel2}: Legendre (2018)\n\n\n\nModule 19\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{car}: Fox et al. (2020), Fox and Weisberg (2019)\n{ggpubr}: @-R-ggpubr\n\n\n\nModule 20\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{car}: Fox et al. (2020), Fox and Weisberg (2019)\n{broom}: Robinson and Hayes (2020)\n{coin}: Hothorn, Winell, et al. (2019), Hothorn et al. (2006), Hothorn et al. (2008)\n{infer}: Bray et al. (2019)\n{permuco}: Frossard and Renaud (2019)\n{dunn.test}: Dinno (2017b)\n{conover.test}: Dinno (2017a)\n\n\n\nModule 21\n\n{jtools}: Long (2020)\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{broom}: Robinson and Hayes (2020)\n{car}: Fox et al. (2020), Fox and Weisberg (2019)\n{gridExtra}: Auguie (2017)\n\n\n\nModule 22\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{MASS}: Ripley (2019), Venables and Ripley (2002)\n{AICcmodavg}: Mazerolle and portions of code contributed by Dan Linden. (2019)\n{MuMIn}: Bartoń (2020)\n\n\n\nModule 23\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{broom}: Robinson and Hayes (2020)\n{patchwork}: Pedersen (2019)\n{lmtest}: Hothorn, Zeileis, Farebrother, and Cummins (2019), Zeileis and Hothorn (2002)\n\n\n\nModule 24\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{lmtest}: Hothorn, Zeileis, et al. (2019), Zeileis and Hothorn (2002)\n{AICcmodavg}: Mazerolle and portions of code contributed by Dan Linden. (2019)\n{lme4}: Bates, Maechler, Bolker, and Walker (2020), Bates, Mächler, Bolker, and Walker (2015)\n{MuMIn}: Bartoń (2020)\n{glmmML}: Broström (2020)\n{glmmboot}: Humphrey (2021)\n\n\n\nModule 25\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{devtools}: Wickham, Hester, and Chang (2020)\n{usethis}: Wickham and Bryan (2020)\n{roxygen2}: Wickham, Danenberg, Csárdi, and Eugster (2020)\n{withr}: Hester, Müller, Ushey, Wickham, and Chang (2020)\n{manipulate}: Allaire (2014)\n\n\n\nModule 26\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{shiny}: Chang, Cheng, Allaire, Xie, and McPherson (2020)\n{DT}: Xie, Cheng, and Tan (2020)\n\n\n\nModule 27\n\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{broom}: Robinson and Hayes (2020)\n{reticulate}: Ushey, Allaire, and Tang (2020)"
  },
  {
    "objectID": "packages.html#in-exercises",
    "href": "packages.html#in-exercises",
    "title": "List of Packages Used",
    "section": "In Exercises",
    "text": "In Exercises\n\n{emayili}: Collier (2021)\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{easypackages}: Sherman (2016)\n{blastula}: Iannone and Cheng (2020)\n{usethis}: Wickham and Bryan (2020)\n{emo}: Wickham, François, and D’Agostino McGowan (2019)\n{sjmisc}: Lüdecke (2020)\n{huxtable}: Hugh-Jones (2021)\n{cowplot}: Wilke (2019)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{kableExtra}: Zhu (2019)\n{ggpubr}: Kassambara (2020)\n{infer}: Bray et al. (2019)"
  },
  {
    "objectID": "packages.html#complete-list",
    "href": "packages.html#complete-list",
    "title": "List of Packages Used",
    "section": "Complete List",
    "text": "Complete List\n\n{AICcmodavg}: Mazerolle and portions of code contributed by Dan Linden. (2019)\n{BBmisc}: Bischl et al. (2017)\n{blastula}: Iannone and Cheng (2020)\n{boot}: Canty and Ripley (2020), Davison and Hinkley (1997)\n{broom}: Robinson and Hayes (2020)\n{car}: Fox et al. (2020), Fox and Weisberg (2019)\n{coin}: Hothorn, Winell, et al. (2019), Hothorn et al. (2006), Hothorn et al. (2008)\n{collape}: Krantz (2020)\n{conover.test}: Dinno (2017a)\n{corrplot}: Wei and Simko (2017a), Wei and Simko (2017b)\n{cowplot}: Wilke (2019)\n{curl}: Ooms (2019)\n{data.table}: Dowle and Srinivasan (2019)\n{dataMaid}: Petersen and Ekstrøm (2019a), Petersen and Ekstrøm (2019b)\n{devtools}: Wickham, Hester, et al. (2020)\n{dplyr}: Wickham, François, et al. (2020)\n{DT}: Xie et al. (2020)\n{dunn.test}: Dinno (2017b)\n{emayili}: Collier (2021)\n{easypackages}: Sherman (2016)\n{emo}: Wickham, François, et al. (2019)\n{forcats}: Wickham (2020)\n{gdata}: Warnes et al. (2017)\n{GGally}: Schloerke et al. (2020)\n{ggExtra}: Attali and Baker (2019)\n{ggplot2}: Wickham, Chang, et al. (2020), Wickham (2016)\n{ggpubr}: Kassambara (2020)\n{glmmboot}: Humphrey (2021)\n{glmmML}: Broström (2020)\n{googledrive}: D’Agostino McGowan and Bryan (2019)\n{googlesheets4}: Bryan (2020)\n{gridExtra}: Auguie (2017)\n{Hmisc}: Harrell (2020)\n{huxtable}: Hugh-Jones (2021)\n{infer}: Bray et al. (2019)\n{jmuOutlier}: Garren (2019)\n{jtools}: Long (2020)\n{kableExtra}: Zhu (2019)\n{knitr}: Xie (2020), Xie (2014), Xie (2015)\n{lme4}: Bates et al. (2020), Bates et al. (2015)\n{lmodel2}: Legendre (2018)\n{lmtest}: Hothorn, Zeileis, et al. (2019), Zeileis and Hothorn (2002)\n{magrittr}: Bache and Wickham (2014)\n{manipulate}: Allaire (2014)\n{MASS}: Ripley (2019), Venables and Ripley (2002)\n{mosaic}: Pruim et al. (2020), Pruim et al. (2017)\n{MuMIn}: Bartoń (2020)\n{pastecs}: Grosjean and Ibanez (2018)\n{patchwork}: Pedersen (2019)\n{permuco}: Frossard and Renaud (2019)\n{psych}: Revelle (2020)\n{purrr}: Henry and Wickham (2020)\n{radiant}: Nijs (2020)\n{rdrop2}: Ram and Yochum (2017)\n{readr}: Wickham et al. (2018)\n{readxl}: Wickham and Bryan (2019)\n{repmis}: Gandrud (2016)\n{reticulate}: Ushey et al. (2020)\n{roxygen2}: Wickham, Danenberg, et al. (2020)\n{scales}: Wickham and Seidel (2019)\n{sciplot}: Morales et al. (2020)\n{shiny}: Chang et al. (2020)\n{sjmisc}: Lüdecke (2020), Lüdecke (2018)\n{skimr}: Waring et al. (2020)\n{stringr}: Wickham (2019a)\n{summarytools}: Comtois (2020)\n{tibble}: Müller and Wickham (2020)\n{tictoc}: Izrailev (2014)\n{tidycovid19}: Gassen (2020)\n{tidyr}: Wickham and Henry (2020)\n{tidyverse}: Wickham (2019b), Wickham, Averick, et al. (2019)\n{usethis}: Wickham and Bryan (2020)\n{withr}: Hester et al. (2020)\n{XLConnect}: Mirai Solutions GmbH (2020)\n{xlsx}: Dragulescu and Arendt (2020)\n\n\n\n\n\nAllaire J. (2014). manipulate: Interactive plots for RStudio. https://CRAN.R-project.org/package=manipulate\n\n\nAttali D, and Baker C. (2019). ggExtra: Add marginal histograms to ’ggplot2’, and more ’ggplot2’ enhancements. https://CRAN.R-project.org/package=ggExtra\n\n\nAuguie B. (2017). gridExtra: Miscellaneous functions for \"grid\" graphics. https://CRAN.R-project.org/package=gridExtra\n\n\nBache SM, and Wickham H. (2014). magrittr: A forward-pipe operator for R. https://CRAN.R-project.org/package=magrittr\n\n\nBartoń K. (2020). MuMIn: Multi-model inference. https://CRAN.R-project.org/package=MuMIn\n\n\nBates D, Mächler M, Bolker B, and Walker S. (2015). Fitting linear mixed-effects models using lme4. Journal of Statistical Software 67: 1–48. https://doi.org/10.18637/jss.v067.i01\n\n\nBates D, Maechler M, Bolker B, and Walker S. (2020). lme4: Linear mixed-effects models using ’eigen’ and S4. https://CRAN.R-project.org/package=lme4\n\n\nBischl B, Lang M, Bossek J, Horn D, Richter J, and Surmann D. (2017). BBmisc: Miscellaneous helper functions for B. Bischl. https://CRAN.R-project.org/package=BBmisc\n\n\nBray A, Ismay C, Chasnovski E, Baumer B, and Cetinkaya-Rundel M. (2019). infer: Tidy statistical inference. https://CRAN.R-project.org/package=infer\n\n\nBroström G. (2020). glmmML: Generalized linear models with clustering. https://CRAN.R-project.org/package=glmmML\n\n\nBryan J. (2020). googlesheets4: Access Google Sheets using the Sheets API V4. https://CRAN.R-project.org/package=googlesheets4\n\n\nCanty A, and Ripley B. (2020). boot: Bootstrap functions (originally by Angelo Canty for S). https://CRAN.R-project.org/package=boot\n\n\nChang W, Cheng J, Allaire J, Xie Y, and McPherson J. (2020). shiny: Web application framework for R. https://CRAN.R-project.org/package=shiny\n\n\nCollier AB. (2021). Emayili: Send email messages. https://CRAN.R-project.org/package=emayili\n\n\nComtois D. (2020). summarytools: Tools to quickly and neatly summarize data. https://CRAN.R-project.org/package=summarytools\n\n\nD’Agostino McGowan L, and Bryan J. (2019). googledrive: An interface to Google Drive. https://CRAN.R-project.org/package=googledrive\n\n\nDavison AC, and Hinkley DV. (1997). Bootstrap Methods and Their Applications. Cambridge: Cambridge University Press. http://statwww.epfl.ch/davison/BMA/\n\n\nDinno A. (2017a). conover.test: Conover-Iman test of multiple comparisons using rank sums. https://CRAN.R-project.org/package=conover.test\n\n\nDinno A. (2017b). dunn.test: Dunn’s test of multiple comparisons using rank sums. https://CRAN.R-project.org/package=dunn.test\n\n\nDowle M, and Srinivasan A. (2019). data.table: Extension of ’data.frame’. https://CRAN.R-project.org/package=data.table\n\n\nDragulescu A, and Arendt C. (2020). xlsx: Read, write, format Excel 2007 and Excel 97/2000/XP/2003 files. https://CRAN.R-project.org/package=xlsx\n\n\nElbers B. (2020). tidylog: Logging for ’dplyr’ and ’tidyr’ functions. https://CRAN.R-project.org/package=tidylog\n\n\nFox J, and Weisberg S. (2019). An R Companion to Applied Regression (Third Edition). Thousand Oaks CA: Sage. https://socialsciences.mcmaster.ca/jfox/Books/Companion/\n\n\nFox J, Weisberg S, and Price B. (2020). car: Companion to applied regression. https://CRAN.R-project.org/package=car\n\n\nFrossard J, and Renaud O. (2019). permuco: Permutation tests for regression, (repeated measures) ANOVA/ANCOVA and comparison of signals. https://CRAN.R-project.org/package=permuco\n\n\nGandrud C. (2016). repmis: Miscellaneous tools for reproducible research. https://CRAN.R-project.org/package=repmis\n\n\nGarren ST. (2019). jmuOutlier: Permutation tests for nonparametric statistics. https://CRAN.R-project.org/package=jmuOutlier\n\n\nGassen J. (2020). tidycovid19: Download, tidy and visualize Covid-19 related data. https://github.com/joachim-gassen/tidycovid19\n\n\nGrosjean P, and Ibanez F. (2018). pastecs: Package for analysis of space-time ecological series. https://CRAN.R-project.org/package=pastecs\n\n\nHarrell FE Jr. (2020). Hmisc: Harrell miscellaneous. https://CRAN.R-project.org/package=Hmisc\n\n\nHenry L, and Wickham H. (2020). purrr: Functional programming tools. https://CRAN.R-project.org/package=purrr\n\n\nHester J, Müller K, Ushey K, Wickham H, and Chang W. (2020). withr: Run code ’with’ temporarily modified global state. https://CRAN.R-project.org/package=withr\n\n\nHothorn T, Hornik K, van de Wiel MA, and Zeileis A. (2006). A Lego system for conditional inference. The American Statistician 60: 257–263. https://doi.org/10.1198/000313006X118430\n\n\nHothorn T, Hornik K, van de Wiel MA, and Zeileis A. (2008). Implementing a class of permutation tests: The coin package. Journal of Statistical Software 28: 1–23. https://doi.org/10.18637/jss.v028.i08\n\n\nHothorn T, Winell H, Hornik K, van de Wiel MA, and Zeileis A. (2019). coin: Conditional inference procedures in a permutation test framework. https://CRAN.R-project.org/package=coin\n\n\nHothorn T, Zeileis A, Farebrother RW, and Cummins C. (2019). lmtest: Testing linear regression models. https://CRAN.R-project.org/package=lmtest\n\n\nHugh-Jones D. (2021). Huxtable: Easily create and style tables for LaTeX, HTML and other formats. https://CRAN.R-project.org/package=huxtable\n\n\nHumphrey C. (2021). Glmmboot: Bootstrap resampling for mixed effects and plain models. https://CRAN.R-project.org/package=glmmboot\n\n\nIannone R, and Cheng J. (2020). Blastula: Easily send HTML email messages. https://CRAN.R-project.org/package=blastula\n\n\nIzrailev S. (2014). tictoc: Functions for timing R scripts, as well as implementations of stack and list structures. https://CRAN.R-project.org/package=tictoc\n\n\nKassambara A. (2020). Ggpubr: ggplot2 based publication ready plots. https://rpkgs.datanovia.com/ggpubr/\n\n\nKrantz S. (2020). collapse: Advanced and fast data transformation. https://CRAN.R-project.org/package=collapse\n\n\nLegendre P. (2018). lmodel2: Model II regression. https://CRAN.R-project.org/package=lmodel2\n\n\nLong JA. (2020). jtools: Analysis and presentation of social scientific data. https://CRAN.R-project.org/package=jtools\n\n\nLüdecke D. (2018). sjmisc: Data and variable transformation functions. Journal of Open Source Software 3: 754. https://doi.org/10.21105/joss.00754\n\n\nLüdecke D. (2020). sjmisc: Data and variable transformation functions. https://CRAN.R-project.org/package=sjmisc\n\n\nMazerolle MJ, and portions of code contributed by Dan Linden. (2019). AICcmodavg: Model selection and multimodel inference based on (Q)AIC(c). https://CRAN.R-project.org/package=AICcmodavg\n\n\nMirai Solutions GmbH. (2020). XLConnect: Excel connector for R. https://CRAN.R-project.org/package=XLConnect\n\n\nMorales M, with code developed by the R Development Core Team, and with general advice from the R-help listserv community and especially Duncan Murdoch. (2020). sciplot: Scientific graphing functions for factorial designs. https://CRAN.R-project.org/package=sciplot\n\n\nMüller K, and Wickham H. (2020). tibble: Simple data frames. https://CRAN.R-project.org/package=tibble\n\n\nNijs V. (2020). radiant: Business analytics using R and Shiny. https://CRAN.R-project.org/package=radiant\n\n\nOoms J. (2019). curl: A modern and flexible web client for R. https://CRAN.R-project.org/package=curl\n\n\nPedersen TL. (2019). patchwork: The composer of plots. https://CRAN.R-project.org/package=patchwork\n\n\nPetersen AH, and Ekstrøm CT. (2019a). dataMaid: A suite of checks for identification of potential errors in a data frame as part of the data screening process. https://CRAN.R-project.org/package=dataMaid\n\n\nPetersen AH, and Ekstrøm CT. (2019b). dataMaid: Your assistant for documenting supervised data quality screening in R. Journal of Statistical Software 90: 1–38. https://doi.org/10.18637/jss.v090.i06\n\n\nPruim R, Kaplan DT, and Horton NJ. (2017). The mosaic package: Helping students to ’think with data’ using R. The R Journal 9: 77–102. https://journal.r-project.org/archive/2017/RJ-2017-024/index.html\n\n\nPruim R, Kaplan DT, and Horton NJ. (2020). mosaic: Project MOSAIC statistics and mathematics teaching utilities. https://CRAN.R-project.org/package=mosaic\n\n\nRam K, and Yochum C. (2017). rdrop2: Programmatic interface to the ’Dropbox’ API. https://CRAN.R-project.org/package=rdrop2\n\n\nRevelle W. (2020). psych: Procedures for psychological, psychometric, and personality research. https://CRAN.R-project.org/package=psych\n\n\nRipley B. (2019). MASS: Support functions and datasets for Venables and Ripley’s MASS. https://CRAN.R-project.org/package=MASS\n\n\nRobinson D, and Hayes A. (2020). broom: Convert statistical analysis objects into tidy tibbles. https://CRAN.R-project.org/package=broom\n\n\nSchloerke B, Crowley J, Cook D, Briatte F, Marbach M, Thoen E, Elberg A, and Larmarange J. (2020). GGally: Extension to ’ggplot2’. https://CRAN.R-project.org/package=GGally\n\n\nSherman J. (2016). Easypackages: Easy loading and installing of packages. https://CRAN.R-project.org/package=easypackages\n\n\nUshey K, Allaire J, and Tang Y. (2020). reticulate: Interface to ’python’. https://CRAN.R-project.org/package=reticulate\n\n\nVenables WN, and Ripley BD. (2002). Modern Applied Statistics with S (Fourth Edition). New York: Springer. http://www.stats.ox.ac.uk/pub/MASS4\n\n\nWaring E, Quinn M, McNamara A, Arino de la Rubia E, Zhu H, and Ellis S. (2020). skimr: Compact and flexible summaries of data. https://CRAN.R-project.org/package=skimr\n\n\nWarnes GR, Bolker B, Gorjanc G, Grothendieck G, Korosec A, Lumley T, MacQueen D, Magnusson A, Rogers J, and others. (2017). gdata: Various R programming tools for data manipulation. https://CRAN.R-project.org/package=gdata\n\n\nWei T, and Simko V. (2017a). corrplot: Visualization of a correlation matrix. https://CRAN.R-project.org/package=corrplot\n\n\nWei T, and Simko V. (2017b). R package \"corrplot\": Visualization of a correlation matrix. https://github.com/taiyun/corrplot\n\n\nWickham H. (2016). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org\n\n\nWickham H. (2019a). stringr: Simple, consistent wrappers for common string operations. https://CRAN.R-project.org/package=stringr\n\n\nWickham H. (2019b). tidyverse: Easily install and load the ’tidyverse’. https://CRAN.R-project.org/package=tidyverse\n\n\nWickham H. (2020). forcats: Tools for working with categorical variables (factors). https://CRAN.R-project.org/package=forcats\n\n\nWickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, and Yutani H. (2019). Welcome to the tidyverse. Journal of Open Source Software 4: 1686. https://doi.org/10.21105/joss.01686\n\n\nWickham H, and Bryan J. (2019). readxl: Read Excel files. https://CRAN.R-project.org/package=readxl\n\n\nWickham H, and Bryan J. (2020). usethis: Automate package and project setup. https://CRAN.R-project.org/package=usethis\n\n\nWickham H, Chang W, Henry L, Pedersen TL, Takahashi K, Wilke C, Woo K, Yutani H, and Dunnington D. (2020). ggplot2: Create elegant data visualisations using the grammar of graphics. https://CRAN.R-project.org/package=ggplot2\n\n\nWickham H, Danenberg P, Csárdi G, and Eugster M. (2020). roxygen2: In-line documentation for R. https://CRAN.R-project.org/package=roxygen2\n\n\nWickham H, François R, and D’Agostino McGowan L. (2019). emo: Easily insert ’emoji’. https://github.com/hadley/emo\n\n\nWickham H, François R, Henry L, and Müller K. (2020). dplyr: A grammar of data manipulation. https://CRAN.R-project.org/package=dplyr\n\n\nWickham H, and Henry L. (2020). tidyr: Tidy messy data. https://CRAN.R-project.org/package=tidyr\n\n\nWickham H, Hester J, and Chang W. (2020). devtools: Tools to make developing R packages easier. https://CRAN.R-project.org/package=devtools\n\n\nWickham H, Hester J, and Francois R. (2018). readr: Read rectangular text data. https://CRAN.R-project.org/package=readr\n\n\nWickham H, and Seidel D. (2019). scales: Scale functions for visualization. https://CRAN.R-project.org/package=scales\n\n\nWilke CO. (2019). cowplot: Streamlined plot theme and plot annotations for ’ggplot2’. https://CRAN.R-project.org/package=cowplot\n\n\nXie Y. (2014). knitr: A comprehensive tool for reproducible research in R. In V Stodden, F Leisch, and RD Peng (Eds.), Implementing reproducible computational research. Chapman; Hall/CRC. http://www.crcpress.com/product/isbn/9781466561595\n\n\nXie Y. (2015). Dynamic Documents with R and knitr (Second Edition). Boca Raton, Florida: Chapman; Hall/CRC. https://yihui.org/knitr/\n\n\nXie Y. (2020). knitr: A general-purpose package for dynamic report generation in R. https://CRAN.R-project.org/package=knitr\n\n\nXie Y, Cheng J, and Tan X. (2020). DT: A wrapper of the JavaScript library ’DataTables’. https://CRAN.R-project.org/package=DT\n\n\nZeileis A, and Hothorn T. (2002). Diagnostic checking in regression relationships. R News 2: 7–10. https://CRAN.R-project.org/doc/Rnews/\n\n\nZhu H. (2019). kableExtra: Construct complex table with ’kable’ and pipe syntax. https://CRAN.R-project.org/package=kableExtra"
  },
  {
    "objectID": "exercise-01.html#preliminary-steps",
    "href": "exercise-01.html#preliminary-steps",
    "title": "10  Exercise 01",
    "section": "Preliminary Steps",
    "text": "Preliminary Steps\n\nNOTE: The most challenging thing about the exercise below is to get the authentication correct for accessing either Google’s (Gmail) or Microsoft’s (Outlook365) SMTP servers. It is often easy to get the R code to work correctly to contact the servers, but then to have the servers not be able to send out an email. The example below should allow you to send emails via R using credentials associated with a personal or university Google Gmail account or a personal Microsoft Outlook account.\n\nIf you have a personal Microsoft Outlook email account, set up a variable to hold your password…\n\npwd_outlook &lt;- \"\" # enter your password between the quotation marks\n\nIf you have a Google Gmail account (either a personal one or one associated with UT, e.g., a (utexas.edu?) account) with 2-factor authorization established, you can follow the steps below to create an “app password” that you can use for authentication.\n\nLog into your Google account or your UT Gmail account on a web browser, click on your user icon and choose “Manage your Google Account”. For example…\n\n\n\n\n\n\n… OR …\n\n\n\n\n\n\nSelect “Security”…\n\n\n\n\n\n\n… and in the window that opens scroll down to the section on “2-Step Verification” and click the arrow at the right.\n\n\n\n\n\nAt this point, you may need to provide information to verify your identity, e.g., by entering a password and/or entering a code you receive from Google. Once in the “Security” section, scroll down to the bottom of the page to the section on “App passwords” and click the “App passwords” button.\n\n\n\n\n\n\nCreate a “new app specific password” by typing a name for the password in the grey field and then click “Create”. The name does not matter, but here I have called it “R”.\n\n\n\n\n\n\nGoogle will create new 16-digit password that you can use in lieu of your actual Google password when sending emails via Gmail in the {emayili} and {blastula} functions below. Copy and save this code in a safe place!\n\n\n\n\n\n\nNOTE: The code will contain spaces between each set of 4 letters… regardless of whether you cut out or include those white spaces, your app password should function just the same.\n\n\nFor ease, then set up a variable to hold your app password…\n\n\npwd_gmail &lt;- \"\" # enter your app password between the quotation marks"
  },
  {
    "objectID": "exercise-01.html#clean-up-steps",
    "href": "exercise-01.html#clean-up-steps",
    "title": "10  Exercise 01",
    "section": "Clean-Up Steps",
    "text": "Clean-Up Steps\n\n# Delete all keys\ndelete_all_credential_keys()"
  },
  {
    "objectID": "exercise-01.html#version-2-using-the-mailr-package",
    "href": "exercise-01.html#version-2-using-the-mailr-package",
    "title": "10  Exercise 01",
    "section": "Version 2: Using the {mailR} package",
    "text": "Version 2: Using the {mailR} package\nThe {mailR} package also allows you to easily send simple emails with a single function, send.mail(). Here, we need to specify details about the SMTP server more explicitly than if we use {blastula}.\n\nStep 1\n\nInstall the {mailR} package.\n\n\ninstall.packages(\"mailR\")\n\n\n\nStep 2\n\nLoad the {mailR} package.\n\n\nlibrary(mailR)\n\n\n\nStep 3\nCreate and send the email.\n\n# send using Google's servers...\nsend.mail(from = \"anthony.difiore@utexas.edu\",\n          to = \"anthony.difiore@gmail.com\",\n          subject = \"Sending a message using {mailR}\",\n          body = \"Hello! This is a plain text message sent from a Gmail account.\",\n          smtp = list(\n            host.name = \"smtp.gmail.com\",\n            port = 587, # most commonly 465 or 587\n            user.name = \"anthony.difiore@utexas.edu\",\n            passwd = pwd_gmail,\n            ssl = TRUE),\n            # to use the Gmail server with ports *other than 587*, `ssl` must be set to TRUE\n            # this initiates a secure connection and allows required encryption\n            # if port 587 is used, either `ssl` or `tls` may be set to TRUE\n          authenticate = TRUE,\n          send = TRUE)\n\n# send using Microsoft's servers...\nsend.mail(from = \"anthony.difiore@outlook.com\",\n          to = \"anthony.difiore@gmail.com\",\n          subject = \"Sending a message using {mailR}\",\n          body = \"Hello! This is a plain text message sent from an Outlook account.\",\n          smtp = list(\n            host.name = \"smtp.office365.com\",\n            port = 587,\n            # to use the Outlook server, the port should be set to 587\n            user.name = \"anthony.difiore@outlook.com\",\n            passwd = pwd_outlook,\n            tls = TRUE),\n            # to use the Outlook server, `tls` (and not `ssl`) must be set to TRUE to allow TLS encryption\n          authenticate = TRUE,\n          send = TRUE)"
  },
  {
    "objectID": "exercise-01.html#version-3-using-the-blastula-package",
    "href": "exercise-01.html#version-3-using-the-blastula-package",
    "title": "10  Exercise 01",
    "section": "Version 3: Using the {blastula} package",
    "text": "Version 3: Using the {blastula} package\nThe {blastula} package allows us to create and send more complex HTML and markdown-based formatted emails.\nSimilar to {emayili}, {blastula} provides two main functions: [1] compose_email() for constructing various parts of a message and [2] smtp_send() for specifying email server settings and passing the message to the server to send. However, {blastula} also adds in some helper functions that allow you to store authentication information in either a separate “credentials” text file that is referenced when you run the function to send a message or in your computer’s keychain. {blastula} also stores some default information on commonly-used email providers and services (e.g., on Google’s Gmail and Microsoft’s Office365 and Outlook), which may make configuring the server setup easier than using {emayili} or {mailR}.\n\nStep 1\n\nInstall the {blastula} package.\n\n\ninstall.packages(\"blastula\")\n\n\n\nStep 2\n\nLoad the {blastula} package.\n\n\nlibrary(blastula)\n\n\n\nStep 3\n\nCreate a new email “message” with the compose_email() function.\n\nThis function takes several intuitive arguments that we can assign values to directly within the function.\n\n# Compose the message\nmessage &lt;- compose_email(\n  body = \"Hello! This is a simple HTML message.\"\n  )\n\n# Preview the message\n# This will open the HTML message in a browser window or in the RStudio Viewer tab\nmessage\n\nWe can add some formatting to our email by using the md() function and markdown syntax. Here, we pipe (%&gt;% or \\&gt; the body argument to the md() function to convert it to markdown.\n\n# Compose the message\nmessage &lt;- compose_email(\n  body = \"# Hello!\\nThis is a simple **HTML** message with some *markdown* syntax.\" %&gt;% md()\n)\n\n# Preview the message\nmessage\n\nWe can also spice up our email with an image from a local file. Here, I use an image stored in a folder called “img” inside the my current working directory.\n\n# Create text as html\ntext &lt;- \"# Hello!\\nThis is a simple **HTML** message with some *markdown* syntax... and a cool picture!\"\n\n# Create image as html\nimage &lt;- add_image(\n  file = \"./img/batnet.jpg\",\n  width = 300, align = \"center\"\n)\n\n# Compose the message\nmessage &lt;- compose_email(\n  body = c(text, image) %&gt;% md()\n)\n\n# Preview the message\nmessage\n\n\n\nStep 4\n\nCreate a credentials file.\n\nThe following will create a text file (in JSON format) in the current working directory that contains default information for your outgoing mail server, e.g., Google’s Gmail server (host = \"smtp.gmail.com\") or Microsoft’s Office365 server (host = \"smtp.office365.com\"), along with your email address and your password. When you run the following lines of code, you will be asked to enter your password, which will then be stored in the credentials file. For a Gmail account, you can use the app password you created above. For an Outlook account, use your standard password.\n\n# Credentials file for a Gmail account\ncreate_smtp_creds_file(\n  file = \"my_gmail_creds\",\n  user = \"anthony.difiore@utexas.edu\",\n  provider = \"gmail\"\n)\n\n# office365 credentials file\ncreate_smtp_creds_file(\n  file = \"my_outlook_creds\",\n  user = \"anthony.difiore@outlook.com\",\n  provider = \"office365\"\n)\n\n\nNOTE: If you omit the provider= argument, you should then pass host=, port=, and use_ssl= arguments yourself to the create_smtp_creds_file() function. The use_ssl= argument allows the use of STARTTLS, which initiates secured (encrypted) TLS or SSL connection, which many email servers require.\n\n\n\nStep 5\n\nSend the message via STMP using a credentials file.\n\n\n# send using Google's servers...\nsmtp_send(email = message,\n  from = \"anthony.difiore@utexas.edu\",\n  to = \"anthony.difiore@gmail.com\",\n  subject = \"Sending a message using {blastula} and a credentials file\",\n  credentials = creds_file(file = \"my_gmail_creds\"),\n  verbose = TRUE\n  # NOTE: As above, setting verbose = FALSE (or omitting the argument) will suppress output to the console\n)\n\n# send using Microsofts's servers...\n# using the %&gt;% operator and different credentials file...\n\nmessage %&gt;% smtp_send(\n    from = \"anthony.difiore@outlook.com\",\n    to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {blastula} and a credentials file\",\n    credentials = creds_file(file = \"my_outlook_creds\")\n)\n\n\n\nStep 6\n\nWe can also send the message by specifying our credentials manually within the smtp_send() function.\n\nThe following will prompt us for our password to send the message:\n\n# send using Google's servers...\nmessage %&gt;% smtp_send(\n    from = \"anthony.difiore@utexas.edu\",\n    to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {blastula} and entering credentials manually\",\n    credentials = creds(\n      user = \"anthony.difiore@utexas.edu\",\n      provider = \"gmail\"\n    )\n  )\n\n# send using Microsoft's servers...\nmessage %&gt;% smtp_send(\n    from = \"anthony.difiore@outlook.com\",\n    to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {blastula} and entering credentials manually\",\n    credentials = creds(\n      user = \"anthony.difiore@outlook.com\",\n      provider = \"office365\",\n      use_ssl = TRUE\n    )\n  )\n\n\n\nNext Steps?\nAgain, use the RStudio Help tab to browse the documentation associated with the {blastula} package to see how you can customize your message, e.g., with attachments.\n\n\nEven More Next Steps?\nFinally, it is a bit more complicated, but note that we can also use the {keyring} package along with {blastula} to set up a credentials “key” in our computer’s keychain and refer to that to specify our credentials for sending a message. When you create the keys, you will be asked to provide your password.\n\ninstall.packages(\"keyring\")\n\n\nlibrary(keyring)\n\n\n# create Gmail key\ncreate_smtp_creds_key(\n  id = \"my_gmail_key\", # an identifier for the key\n  user = \"anthony.difiore@utexas.edu\",\n  provider = \"gmail\",\n  overwrite = TRUE # this argument is only needed if you have an existing key\n)\n\n# create Outlook key\ncreate_smtp_creds_key(\n  id = \"my_outlook_key\", # an identifier for the key\n  user = \"anthony.difiore@outlook.com\",\n  provider = \"office365\",\n  overwrite = TRUE\n)\n\n\n# View all keys\nview_credential_keys()\n\n\n# send a message with credentials from a keychain\n# using Google's servers...\nmessage %&gt;%\n  smtp_send(\n    from = \"anthony.difiore@utexas.edu\",\n    to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {blastula} and credentials from a keychain\",\n    credentials = creds_key(id = \"my_gmail_key\")\n  )\n\n# send a message with credentials from a keychain\n# using Microsoft's servers...\nmessage %&gt;%\n  smtp_send(\n    from = \"anthony.difiore@outlook.com\",\n    to = \"anthony.difiore@gmail.com\",\n    subject = \"Sending a message using {blastula} and and credentials from a keychain\",\n    credentials = creds_key(id = \"my_outlook_key\"), verbose = TRUE\n  )"
  }
]